{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Practice\\\\my-app\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n//  React Functional Components\n/*\r\nimport React from \"react\";\r\nimport Heading from \"./Components/Heading\";\r\nimport {Para} from \"./Components/Para\";\r\nimport OrderedList from \"./Components/OrderedList\";\r\n\r\nconst App = () =>{\r\n    return (\r\n        <>\r\n        <Heading/>\r\n        <Para/>\r\n         <OrderedList/>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// React class components\n/*\r\nimport React from \"react\";\r\nimport User from \"./Components/Classuser\";\r\nconst App = () =>{\r\n    return (\r\n        <>\r\n        <User/>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Create class component within same file\n// To create the class component we use key word class, extends from component, and must use render() methid and then return\n/*\r\nimport React,{Component} from \"react\";\r\nconst App = () =>{\r\n    return (\r\n        <>\r\n        <User/>\r\n        </>\r\n    )\r\n}\r\n\r\nclass User extends Component{\r\n    render(){\r\n        return(\r\n            <h1> hello...</h1>\r\n        )\r\n    }\r\n}\r\n*/\n\n// Component within component but we can use only that component not outside it and there are twe ways.\n/*\r\nimport React from \"react\";\r\nimport User from \"./Components/Classuser\";\r\nconst App = () =>{\r\n    function Other(){\r\n        return(\r\n            <><h1>Vanita Chawla</h1></>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n        <User/>\r\n        <Other/>\r\n        {Other()}\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Can we write the code without jsx and just using js. yes :) , here is example of only one div\n/*\r\nimport React from \"react\";\r\nconst App = () =>{\r\n\r\n    return React.createElement(\"div\",null,\"Hello this is my first div with out jsx\");\r\n    \r\n\r\n}\r\n*/\n\n// Now example of child inside div\n/*\r\nimport React from \"react\";\r\nconst App = () =>{\r\n\r\n    return React.createElement(\"div\",null,React.createElement(\"h1\",null,\"Hello this is my first div with out jsx\"));\r\n    \r\n\r\n}\r\n*/\n\n// Click event and function in ReactJs\n// Problem here is that if i click on button and my data variables changes but it shows first value not updated value why? here we use stats to change the state.\n// The reason why the data is not re-rendered onto the screen is because of functional components being stateless components. Stateless components cannot change their state during the runtime of the app, which means the components cannot be redrawn while the app is in action. If we console.log the data just after clicking the button by putting the {console.log(data)}, we will get the updated value of that data but we cannot see the updated value on the screen because the state is internally changed but the component did not render again due to its stateless nature.\n/*\r\nimport React from \"react\";\r\nfunction App(){\r\nlet data = \"Vanita chawla\"\r\n    function myfunc(){\r\n        data = \"Vini chawla\"\r\n        alert(\"function clicked!\")\r\n    }\r\n\r\n    return(\r\n      <>\r\n        <h1>{data}</h1>\r\n        <button onClick={myfunc}>Click me</button>\r\n        <button onClick={()=> alert(\"hi\")}>click me</button>\r\n        <button onClick={()=> myfunc()}>click me</button>\r\n      </>\r\n    )\r\n}\r\n*/\n\n//  State with functional component\n// State is object in which we store the data\n// As in above example when we use variable then component not update with click.\n// We use state to update the component, when we click on btn state changes then component updated because it understand state is changed.\n// When we use state then it again re-render the the jsx part/functional component when state changes\n// Usestate is hook to update the state.\n/*\r\nimport React,{useState} from \"react\";\r\nconst App=()=>{\r\n    const [data,setData] = useState(\"Vanita\");\r\n    const [count, setCount] = useState(0)\r\n    function updateData(){\r\n        setData(\"Chawla\");\r\n        setCount(count + 1);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h1>{data}</h1>\r\n            <p>{count}</p>\r\n            <button onClick={updateData}>Click me</button>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// State with class component (we cannot use useState here)\n// to use the state in class component i make a app component with class component not functional\n// In class component we use state for this we have to follow these steps\n// i) create constructor\n// ii) call parent constructor for this we use super();\n// iii) create state by using this\n// To make the function no need to use function keyword and call this function by using arrow function and this variable (e.g. ()=> this.updateData())\n// To update the state we write like this e.g. this.setState({data:\"chawla\"})\n// To display the data we write this.state.data\n// We cannot use state outside the component\n// State is public\n\n// for name update\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            data:\"Vanita\"\r\n        }\r\n    }\r\n\r\n    updateData(){\r\n        this.setState({\r\n            data:\"chawla\"\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n            <h1>{this.state.data}</h1>\r\n            <p>0</p>\r\n            <button onClick={()=> this.updateData()}>Click me</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n*/\n\n// for counter\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            data:0\r\n        }\r\n    }\r\n\r\n    updateData(){\r\n        this.setState({\r\n            data:this.state.data + 1\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n            <h1>{this.state.data}</h1>\r\n            <button onClick={()=> this.updateData()}>Click me</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n*/\n\n// Props with functional component\n// props arelike parameter we create component and send data to that component with helps of props or we can say send props to that component\n// We can only update the state here means in parent component not in child component (Student)\n// pass functions and html also\n/*\r\nimport React, { useState } from \"react\";\r\nimport Student from \"./Components/Student\";\r\n\r\nconst App=()=>{\r\n\r\n    let heading={\r\n        display:\"flex\",\r\n        flexDirection : \"column\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        gap:\"1rem\",\r\n        marginTop:\"1rem\"\r\n    }\r\n\r\n    const [name,setName] = useState(\"Vinita Chawla\");\r\n\r\n\r\n    function Apple(){\r\n        alert(\"Hello\")\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div style={heading}>\r\n            <h1>React props</h1>\r\n            <Student name={name} email={\"vini@gmail.com\"} func={Apple} other={{address:\"Ghotki\", role:\"Student\"}}\r\n                html= {<h1>This is HTML heading</h1>}\r\n            />\r\n        <button onClick={()=> setName(\"Vanita Chawla\")}>Update name</button>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Props in class component (Both ways 1-change state directly  2- change with function)\n/*\r\nimport React, { Component} from \"react\";\r\nimport ClassStudent from \"./Components/ClassStudent\";\r\n\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            name:\"Vanita Chawla\"\r\n        }\r\n    }\r\n \r\n    updateName(){\r\n        this.setState({name:\"Vini\"})\r\n    }\r\n\r\n    render(){\r\n        let heading={\r\n            display:\"flex\",\r\n            flexDirection : \"column\",\r\n            justifyContent : \"center\",\r\n            alignItems : \"center\",\r\n            gap:\"1rem\",\r\n            marginTop:\"1rem\"\r\n        }\r\n    \r\n        \r\n        return(\r\n            <>\r\n            <div style={heading}>\r\n                <h1>React props</h1>\r\n                <ClassStudent name={this.state.name} email=\"vini@gmail.com\"/>\r\n                <button onClick={()=> this.setState({name:\"vinita\"})}>Update name1</button>\r\n                <button onClick={()=> this.updateName()}>Update name2</button> \r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n*/\n\n// Get Input box value by changing the input or click on btn and then get value\n// One method\n/*\r\nimport React, { useState } from \"react\";\r\nconst App = ()=>{\r\n    const [data,setData] = useState(null);\r\n    const [value ,setValue] = useState(null);\r\n\r\n    function getValue(val){\r\n        console.log(val.target.value);\r\n        setData(val.target.value)\r\n    }\r\n\r\n    function btnClicked(){\r\n        alert(\"clicked\")\r\n        setValue(data);\r\n\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h1>Input Box value</h1>\r\n            <h1>With input change: {data}</h1>\r\n            <h1>With button click: {value}</h1>\r\n            <input type=\"text\" onChange={getValue}/>\r\n            <button onClick={btnClicked}>click me</button>\r\n\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Other method\n// When typing hide value by writing this statemenet setValue(false);\n/*\r\nimport React, { useState } from \"react\";\r\nconst App = ()=>{\r\n    const [data,setData] = useState(null);\r\n    const [value ,setValue] = useState(false);\r\n\r\n    function getValue(val){\r\n        console.log(val.target.value);\r\n        setData(val.target.value);\r\n        setValue(false);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h1>Input Box value</h1>\r\n            {value ? <h1>{data}</h1> : null}\r\n            <input type=\"text\" onChange={getValue}/>\r\n            <button onClick={()=>setValue(true)}>click me</button>\r\n\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Hide , Show and Toggle in ReactJs\n/*\r\nimport React, { useState } from \"react\";\r\nconst App = ()=>{\r\n    const [status, setStatus] = useState(true)\r\n    return(\r\n        <>\r\n           {status ? <h1>Hello Vanita!</h1> : null} \r\n            <button onClick={()=> setStatus(false)}>Hide</button>\r\n            <button onClick={()=> setStatus(true)}>Show</button>\r\n            <button onClick={()=> setStatus(!status)}>toggle</button>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Handle Form | checkbox | input field | select\n/*\r\nimport React, { useState } from \"react\";\r\n\r\nconst App=()=>{\r\n    const [name, setName] = useState(\"\");\r\n    const [lang, setLang] = useState(\"\");\r\n    const [terms, setTerms] = useState(false);\r\n    const [status, setStatus] = useState(false)\r\n\r\n\r\n    function formSubmitted(e){\r\n        console.log(name,lang,terms);\r\n        setStatus(true);\r\n        e.preventDefault();\r\n    }\r\n    return(\r\n        <>\r\n            <h1>Form Submission</h1>\r\n            <form onSubmit={formSubmitted}>\r\n            <input type=\"text\" placeholder=\"Enter Name\" onChange={(e)=> setName(e.target.value)}/> <br/><br/>\r\n            <select onChange={(e)=> setLang(e.target.value)}>\r\n                <option>Select Option</option>\r\n                <option>English</option>\r\n                <option>Sindhi</option>\r\n                <option>Urdu</option>\r\n            </select><br/><br/>\r\n            <input type=\"checkbox\" onChange={(e)=> setTerms(e.target.checked)}/><span>Terms & conditions</span><br/><br/>\r\n            <button type=\"submit\">Submit</button><br/><br/>\r\n           \r\n    </form>\r\n\r\n    {status ? <> \r\n            <h2>Output</h2>\r\n            <p>Name: {name}</p>\r\n            <p>Language: {lang}</p>\r\n            </> : \"\" }\r\n           \r\n        </>\r\n    )\r\n}\r\n*/\n\n// Conditional rendering | If Condition\n/*\r\nimport React from \"react\";\r\nimport Profile from \"./Components/Profile\";\r\n\r\nconst App=()=>{\r\n    return <Profile/>\r\n}\r\n\r\n*/\n\n// Basic Form validation\n/*\r\nimport React from \"react\";\r\nimport Login from \"./Components/Login\";\r\n\r\nconst App=()=>{\r\n    return <>\r\n    <Login/>\r\n    </>\r\n}\r\n*/\n\n// Challenge.... counter with increment, decrement and reset by using useState with previous state\n// With functional component\n/*\r\nimport React from \"react\";\r\nimport Counter from \"./Components/Counter\";\r\n\r\nconst App=()=>{\r\n    return <Counter/>\r\n}\r\n*/\n\n// With class component\n/*\r\nimport React from \"react\";\r\nimport ClassCounter from \"./Components/ClassCounter\";\r\n\r\nconst App=()=>{\r\n    return <ClassCounter/>\r\n}\r\n*/\n\n//challange... replace the array element with other\n/*\r\nimport React, { useState } from \"react\";\r\n\r\nconst App=()=>{\r\n  const [array, setArray] = useState([\"apple\",\" banana\",\" oranges\"]);\r\n\r\n  function replacElement(index, element){\r\n    setArray((prevValue)=>{\r\n        let newArray = [...prevValue]\r\n        newArray[index] = element\r\n        return newArray\r\n    })\r\n  }\r\n  \r\n    return <>\r\n    <h3>{array.map((fruit, index)=> <li id={index}>{fruit}</li>)}</h3> <br/>\r\n    <button onClick={()=> replacElement(0,\"mango\")}>Replace</button>\r\n   \r\n    </>\r\n}\r\n*/\n\n// Life cycle method used in react js\n// component is loaded (mounted)\n// When component is updated with state and props (updated)\n// when component is removed (Unmounted)\n// Question is when i remove the component then after reload life cycle start again or follow continued cycle. answer is it starts again from starting\n\n// 1) constructor life cycle method\n// This constructor life cycle method is used before the render method is called which contains html also so if we want something before render method then we use this constructor life cycle just like usestate which we define before render. in class component we define state in constructor b/c constructor automatically called after class.\n// We cant define api in constructor\n/* \r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            name:\"Vanita\"\r\n        }\r\n    }\r\n  render(){\r\n    return <h1>{this.state.name}</h1>\r\n  }\r\n}\r\n*/\n\n// 2) Render, life cycle method\n// Render method is called when\n// i. when component is created and called at start\n// ii. when states and props updated then\n/*\r\nimport React from \"react\";\r\nimport RenderCycle from \"./Components/RenderCycle\";\r\n\r\nconst App = ()=>{\r\n    return <RenderCycle email = \"vini@gmail.com\"/>\r\n}\r\n*/\n\n// 3) componentDidMount life cycle method\n// It is used when\n// i. all the html is completly loaded and now this method is called\n// ii. we call api in this method because api is called after loading of all the page\n// iii. this method is called when any thing is completely dependent on html so jese he html load hoge ye method call hojaega\n// it is called after the render method this method meaning sara component mount hojaega tab he ye method call hoga\n// jab component ko show ya hide karengy tab bhi ye use ho sakta a\n// ye method bs component ke load hone ke bad he chalta ha jab hum stats change karte tab render method dobara chalta ha per ye componentDidMount nahi chalta ye bas ek bar he chalta ha.tab he hum api ko es ke andr call karte hei kiyu k api srf ek bar he call ate ha after html/page reload.\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            name:\"Vanita\"\r\n        }\r\n        console.log(\"constructor\");\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"componentDidMount\");\r\n    }\r\n    render(){\r\n        console.log(\"render\");\r\n        return (\r\n        <>\r\n        <h1>componentDidMount</h1>\r\n        <p>{this.state.name}</p>\r\n        <button onClick={()=>{this.setState({name:\"vini\"})}}>Update</button>\r\n        </>\r\n        )\r\n    }\r\n}\r\n*/\n\n// 4)  componentDidUpdate life cycle method\n// Ye method tab chalta ha jab stats ya props update hote hei\n// when i click on button then stat changes and this function called\n// es ke andr hum api call karwa sakte hei per jab conditionally call karwane ho tou otherwise nae kar sakte other componentDidMount mei karwayengy\n\n// With name\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            name:\"vini\"\r\n        }\r\n\r\n        console.log(\"constructor\")\r\n\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log(\"componentDidUpdate\")\r\n    }\r\n\r\n    render(){\r\n        console.log(\"render\")\r\n\r\n        return(\r\n            <>\r\n                <h1>componentDidUpdate {this.state.name}</h1>\r\n                <button onClick={()=>{this.setState({name:\"chawla\"})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n*/\n\n// also with counter\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count:0\r\n        }\r\n\r\n        console.log(\"constructor\")\r\n\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log(\"componentDidUpdate\")\r\n    }\r\n\r\n    render(){\r\n        console.log(\"render\")\r\n\r\n        return(\r\n            <>\r\n                <h1>componentDidUpdate {this.state.count}</h1>\r\n                <button onClick={()=>{this.setState({count: this.state.count+1})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n*/\n\n// It also takes 3 parameter prevProps,prevState,snapshot\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count:0\r\n        }\r\n\r\n        console.log(\"constructor\")\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState,snapshot){\r\n        console.log(prevState)\r\n        console.log(prevState.count, this.state.count)\r\n        if(prevState.count === this.state.count){\r\n            alert(\"same!\")\r\n        }\r\n    }\r\n\r\n    render(){\r\n        console.log(\"render\")\r\n\r\n        return(\r\n            <>\r\n                <h1>componentDidUpdate {this.state.count}</h1>\r\n                <button onClick={()=>{this.setState({count:1})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n\r\n} \r\n*/\n\n// alse we can't update state without using any condition in this function. because it goes in infinite loop\n// Here in this example i use condition if it is less than 10 then loop works\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count:0\r\n        }\r\n\r\n        console.log(\"constructor\")\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState,snapshot){\r\n        console.log(prevState)\r\n        console.log(prevState.count, this.state.count)\r\n        if(this.state.count < 10){\r\n            this.setState({\r\n                count:this.state.count+1\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        console.log(\"render\")\r\n\r\n        return(\r\n            <>\r\n                <h1>componentDidUpdate {this.state.count}</h1>\r\n                <button onClick={()=>{this.setState({count:1})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n} \r\n*/\n\n// 5) shouldComponentUpdate life cycle method\n// Ye puchta ha k component ko update karna ha ya nae jese hum ne koe state change karwae to render method ya kise bhi life cycle method ko update karna ha ya nae ye hum condition mei bta sakte.\n// Hum specific condition deker stop karwa sakte k render method ab na update ho jese state 4 bar pe render update ho us ke bad nae\n// By default ye method component to update nae hone deta wo block kar deta ha jese hum click kar rhe state update console mei dikh rhe per output mei 0 he ha to jab hum return true karengy wo upadte hone dega. wo show es liye nahi hota kiyu k render method dobara chala he nae es ne update hone he nae dia.\n// Hum condition bhi laga sakte k srf  5 or 10 ke bech mei show ho render method update ho wese nahi ho\n// componentDidUpdate es ke bad call hota ha because ye decide karta tha render update hoga ya nae ek bar render update hwe to componentDidUpdate call hojaega.\n\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count:0\r\n        }\r\n\r\n        console.log(\"constructor\")\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(){\r\n        console.log(\"shouldComponentUpdate\", this.state.count);\r\n        if(this.state.count >0 && this.state.count < 5){\r\n            return true;\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        console.log(\"componentDidUpdate\")\r\n    }\r\n  \r\n\r\n    render(){\r\n        console.log(\"render\")\r\n\r\n        return(\r\n            <>\r\n                <h1>shouldComponentUpdate {this.state.count}</h1>\r\n                <button onClick={()=>{this.setState({count: this.state.count+1})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n*/\n\n// componentWillUnmount life cycle method\n// Ye method tab call hoga jab koe component dom se delete hoga\n// Jab hum component ko hide karte tab hum ye method call karwate\n// Us ke liye hum yhan child component bnaengy k jab button pe click ho child component remove ho fir ye method call hojae\n/*\r\nimport React, { Component } from \"react\";\r\nimport OneComponent from \"./Components/OneComponent\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            show:true\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                <h1>componentWillUnmount </h1>\r\n{\r\n    this.state.show ? <OneComponent/> : <h1> Child component removed!</h1>\r\n}\r\n            <button onClick={()=>{this.setState({show: !this.state.show})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n*/\n\n// Hooks\n// we use hooks to use the class components features in functional component like state, lifecycle etc\n// useEffect hook\n// useeffect hook functional component mei ek life cycle ke tarah hota ha jese life cycle class component mei the.\n// ab useEffect call hota ha jab component bne or stats ya props update hon per hum es mei condition bhi laga sakte k agr humare pas 4 stats hei to ye srf ek state ke change hone pe chale ya kise bhi state ke change hone pe na chale bas jab component bne tab chale.\n// Usereffect apne ap mei function leta a and hum 1 se ziyada bhi useEffect bna sakte\n\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\nfunction App(){\r\n    const [count,setCount] = useState(\"vini\")\r\n\r\n    useEffect(()=>{\r\n        console.log(\"useEffect\")\r\n    })\r\n    return(\r\n        <>\r\n        <h1>UseEffect {count}</h1>\r\n        <button onClick={()=>setCount(\"vinita\")}>update</button>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Ab hum yhan dekhengy k hum specific state or prop pe useEffect ko kese call kar sakte hei\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PropsEx from \"./Components/PropsEx\"\r\n\r\nconst App=()=>{\r\n    const [count,setCount] = useState(0);\r\n    const [data,setData] = useState(100);\r\n\r\n    useEffect(()=>{\r\n        console.log(\"useEffect for data\")\r\n    },[data])\r\n\r\n    useEffect(()=>{\r\n        console.log(\"useEffect for count\")\r\n    },[count])\r\n\r\n    return(\r\n        <>\r\n           <br/> <h1>UseEffect</h1> <br/>\r\n            <h3>Count :: {count}</h3> <br/>\r\n            <h3>Data :: {data}</h3><br/>\r\n            <PropsEx count={count} data={data}/> <br/>\r\n            <button onClick={()=> setCount(count+1)}>Update Count</button><br/>\r\n            <button onClick={()=> setData(data+1)}>Update Data</button>\r\n\r\n        </>\r\n    )\r\n}\r\n*/\n\n//  style in ReactJs (2 ways already done ... inline, external)\n// Another is modular css\n/*\r\nimport React from \"react\";\r\nimport style from \"./custom.module.css\"\r\nconst App=()=>{\r\n    return(\r\n        <>\r\n            <h1 className={style.success} style={{display:\"flex\",justifyContent:\"center\"}}>hello</h1>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Install Bootstrap\n/*\r\nimport React from \"react\";\r\nimport { Button,Alert } from \"react-bootstrap\";\r\nconst App= ()=>{\r\n    return(\r\n        <>\r\n            <div>\r\n                <h1>Bootstrap</h1>\r\n            <Button onClick={()=> alert(\"hi\")}>Click Me</Button> <br/>\r\n            <Alert variant='warning'>\r\n                  This is a alert—check it out!\r\n        </Alert>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n*/\n\n//  Array Listing with Map function (because react don't support for loop inside return but outside return it works well.)\n// And list with bootstrap table\n/*\r\nimport React from \"react\";\r\nimport {Table} from 'react-bootstrap';\r\n\r\nlet array = [\"vini\", \"vanita\", \"vinita\", \"kato\", \"tidi\"];\r\nlet obj = [\r\n  { name: \"Vanita\", email: \"vanita@gmail.com\", contact: \"000\" },\r\n  { name: \"Vinita\", email: \"vinita@gmail.com\", contact: \"111\" },\r\n  { name: \"Vini\", email: \"vini@gmail.com\", contact: \"222\" },\r\n  { name: \"Kato\", email: \"kato@gmail.com\", contact: \"333\" },\r\n];\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <h1>Hello</h1>\r\n      {array.map((element) => {\r\n        return <h3>Name is : {element}</h3>;\r\n      })}\r\n      <Table striped bordered hover variant=\"dark\">\r\n      <thead>\r\n        <tr>\r\n        <th>ID</th>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n          <th>Contact</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {obj.map((element,index) => {\r\n          return (\r\n            <>\r\n              <tr key={index}>\r\n              <td>{index +1}</td>\r\n                <td>{element.name}</td>\r\n                <td>{element.email}</td>\r\n                <td>{element.contact}</td>\r\n              </tr>\r\n            </>\r\n          );\r\n        })}\r\n        \r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n*/\n\n// Nested List in ReactJs\n/*\r\nimport React from \"react\";\r\nimport {Table} from 'react-bootstrap';\r\nlet obj = [\r\n  { name: \"Vanita\", email: \"vanita@gmail.com\", contact: \"000\", address:[\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n  ] },\r\n  { name: \"Vinita\", email: \"vinita@gmail.com\", contact: \"111\",address:[\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n  ] },\r\n  { name: \"Vini\", email: \"vini@gmail.com\", contact: \"222\", address:[\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n  ] },\r\n  { name: \"Kato\", email: \"kato@gmail.com\", contact: \"333\", address:[\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n  ]  },\r\n];\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <h1>Hello</h1>\r\n      \r\n      <Table striped bordered hover variant=\"dark\">\r\n      <thead>\r\n        <tr>\r\n        <th>ID</th>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n          <th>Contact</th>\r\n          <th>Address</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n      \r\n    {\r\n       obj.map((element,index)=>{\r\n       return(\r\n        <tr key={index}>\r\n         <td>{index+1}</td>\r\n          <td>{element.name}</td>\r\n          <td>{element.email}</td>\r\n          <td>{element.contact}</td>\r\n          <td>\r\n         <Table striped bordered hover variant=\"dark\">\r\n         <tbody>\r\n            {\r\n                element.address.map((item)=>{\r\n                   return(\r\n                    <tr>\r\n                    <td>{item.houseNo}</td>\r\n                  <td>{item.city}</td>\r\n                  <td>{item.country}</td>\r\n                    </tr>\r\n                   )\r\n                })\r\n            }\r\n            </tbody>\r\n            </Table>\r\n          </td>\r\n        </tr>\r\n       )\r\n       })\r\n    }\r\n        \r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n*/\n\n// Reuse component in loop\n/*\r\nimport React from \"react\";\r\nimport TableEx from \"./Components/TableEx\";\r\nimport {Table} from 'react-bootstrap';\r\n\r\nlet obj = [\r\n  { name: \"Vanita\", email: \"vanita@gmail.com\", contact: \"000\" },\r\n  { name: \"Vinita\", email: \"vinita@gmail.com\", contact: \"111\" },\r\n  { name: \"Vini\", email: \"vini@gmail.com\", contact: \"222\" },\r\n  { name: \"Kato\", email: \"kato@gmail.com\", contact: \"333\" },\r\n];\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <h1>Hello</h1>\r\n    <Table striped bordered hover variant=\"dark\">\r\n    <thead>\r\n        <tr>\r\n        <th>ID</th>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n          <th>Contact</th>\r\n        </tr>\r\n        </thead>\r\n   <tbody>\r\n    {\r\n        obj.map((item,i)=>{\r\n            function btnClicked(){\r\n              alert(item.name)\r\n    }\r\n            return <TableEx index={i} data={item} func={btnClicked}/>\r\n        })\r\n    }\r\n</tbody>\r\n    </Table>\r\n    </>\r\n  );\r\n};\r\n*/\n\n// Send Data Child to Parent Component or lifting state up\n/*\r\nimport React from \"react\";\r\nimport LiftingState from \"./Components/LiftingState\";\r\nconst App=()=>{\r\n    function parentAlert(data){\r\n        console.log(data)\r\n        alert(\"parentAlert \"+ data.name)\r\n    }\r\n    return(\r\n        <>\r\n            <h1>Hello</h1>\r\n            <LiftingState alert={parentAlert}/>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Pure component\n// Ye ek feature ha jo hum import karke use karte hei per ye srf class components ke liye hota a\n// pure component, component ke re-rendering ko rokta ha jese hum ne btn click se name change karwaya per wo name same ha pahle jesa to ye pahle check karega agr wo same ha to re-rendering nae karwayega warna karwayega.\n// every time it shows 1 so that purecomponent stop from rerender everytime.\n// We can do same for props\n/*\r\nimport React, { Component, PureComponent } from \"react\";\r\nclass App extends PureComponent{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count: 1\r\n        }\r\n    }\r\n\r\n    render(){\r\n        console.log(\"Check rendering\")\r\n        return(\r\n            <>\r\n                <h1>Count is {this.state.count}</h1>\r\n                <button onClick={()=> this.setState({count:1})}>click me</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n*/\n\n// useMemo Hook\n// this is used to prevent the unwanted call of functions or unwanted re-rendering of component\n// When i click on update count then function called and then i click on update item agin the function called which is un wanted to prevent this we use memo and tell that only when count updated this function called.\n// first we use this <h2>{countUpdate()}</h2> then after memo  <h2>{newUseMemo}</h2>\n/*\r\nimport React, { useState,useMemo } from \"react\";\r\n\r\nconst App =()=>{\r\n    const [count,setCount] = useState(1);\r\n    const [item,setItem] = useState(1);\r\n\r\nconst newUseMemo = useMemo( function countUpdate(){\r\n    console.log(\"countUpdate\")\r\n    return count*5;\r\n},[count])\r\n   \r\n\r\n    return(\r\n        <>\r\n            <h1>Hello</h1>\r\n            <h2>count is {count}</h2>\r\n            <h2>item is {item}</h2>\r\n            <h2>{newUseMemo}</h2>\r\n            <button onClick={()=>setCount(count+1)}>Update count</button> <br/>\r\n            <button onClick={()=>setItem(item*10)}>Update item</button>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Ref with Example (for class components)\n// Ref zabardasti dom ko manipulate kar sakta ha jese k color change karna input ke value ko change karna ya aur bhi bhut kuch per react humen directly dom ko manipulate karne se manah karta kiyu k performance kharab hote es liye hum ref ko kam use karte.\n// console.log(this.inputRef) ye humen us element ke sare properties de deta.\n/*\r\nimport React, { Component,createRef } from \"react\"; \r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.inputRef = createRef();\r\n    }\r\n\r\n    getValue(){\r\n        console.log(this.inputRef)\r\n        console.log(this.inputRef.current.value)\r\n        this.inputRef.current.style.color=\"white\"\r\n        this.inputRef.current.style.backgroundColor=\"black\"\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n                <h1>Hello</h1> \r\n                <input type=\"text\" ref={this.inputRef}/> <br/>\r\n                <button onClick={()=>this.getValue()}>Click</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n*/\n\n// useRef Hook example\n// useRef bhi same he kam karta ha dom ke andr manipulation ke liye use hota ha\n/*\r\nimport React, { useRef } from \"react\";\r\nconst App=()=>{\r\n    let inputRef = useRef(null);\r\n    function getValue(){\r\n        console.log(inputRef);\r\n        inputRef.current.value = \"Vanita\"\r\n        inputRef.current.focus();\r\n        inputRef.current.style.color=\"white\"\r\n        inputRef.current.style.backgroundColor=\"black\"\r\n\r\n    }\r\n    return(\r\n        <>\r\n            <h1>Hello</h1> \r\n            <input type=\"text\" ref={inputRef}/> <br/>\r\n            <button onClick={()=>getValue()}>Click</button>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// forwardRef example\n// now useRef is used to manipulate the dom but here we want to send the inputRef from parent to child component, the useRef is used to send the ref and forward ref is used in child component to receive the ref.\n// forward ref is itself wrapper\n// we can also use forwardRef for class components\n/*\r\nimport React, { useRef } from \"react\";\r\nimport UserRef from \"./Components/UserRef\";\r\nconst App=()=>{\r\n    let inputRef = useRef(null);\r\n    function getValue(){\r\n        console.log(inputRef);\r\n        console.log(inputRef.current.value);\r\n        inputRef.current.value = \"Vanita\"\r\n        inputRef.current.focus();\r\n        inputRef.current.style.color=\"white\"\r\n        inputRef.current.style.backgroundColor=\"black\"\r\n\r\n    }\r\n    return(\r\n        <>\r\n            <h1>Hello</h1> \r\n            <UserRef ref={inputRef}/>\r\n            <button onClick={()=>getValue()}>Click</button>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Controlled Component\n// controlled component input ya form ke andr input elements ko kahte hei or jimhen hum react js ke andr state ke through manipulate karen jese input ke value change karwa den ya color wagera karwa den.\n// Aur uncontrolled component input ya form ke andr input elements hote hei jo hum directly dom se manipulate karwa kar change karte jese jquery ke andr id pass karwa kar, js ke andr element ko get karke ya fir react js ke andr usereF ko use karke.\n// Ye class or functional component donon ke liye use ho sakta\n/*\r\nimport React, { useState } from \"react\";\r\nconst App=()=>{\r\n    const [data,setData] = useState(\"000\");\r\n    return(\r\n        <>\r\n            <h1>Hello</h1> \r\n            <input type=\"text\" value={data} onChange={(e)=> setData(e.target.value)}/> <br/>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Uncontrolled Component\n// State ke elawa hum kese bhi input filed ko manipulate karen wo uncontrolled componnet hota ha\n// Ye class or functional component donon ke liye use ho sakta\n/*\r\nimport React, { useRef } from \"react\";\r\nconst App=()=>{\r\n    let inputRef = useRef();\r\n    let inputRef2 = useRef();\r\n\r\n    function formSubmitted(e){\r\n        e.preventDefault();\r\n        console.log(\"Input field 1 value: \" + inputRef.current.value);\r\n        console.log(\"Input field 2 value: \" + inputRef2.current.value)\r\n       let inputVal = document.getElementById(\"input3\").value;\r\n       console.log(\"Input field 3 value: \"+ inputVal)\r\n    }\r\n    return(\r\n        <>\r\n             <h1>Hello</h1> \r\n             <form onSubmit={formSubmitted}>\r\n                <input type=\"text\" ref={inputRef} /> <br/><br/>\r\n                <input type=\"text\" ref={inputRef2} /><br/><br/>\r\n                <input type=\"text\" id=\"input3\" /><br/><br/>\r\n                <button>Submit</button>\r\n             </form>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// Hight order component (HOC)\n// humen ek counter banana ha per sab ke alag se styling ho to humen conditions lagane parhegi, ab hum kitne conditions lagaen gy us se bachne ke liye hum ek HOC component(Wrapper componnet) bnaengy, HOC component ka kam hota ha k wo component as a input lega or kuch functionality laga kar component as a output return karega.\n// hum yhan 2 component bnaengy counter ka aur HOC ka\n// Ab hum app component ke andr HOC show karwa rahe jo counter as a props input jarha or bad mei humen wo counter return horha props.cmp karke.\n// Ese he hum HOC bna kar ek he counter different styling ke sath use kar sakte.\n/*\r\nimport React, { useState } from \"react\";\r\nconst App=()=>{\r\n    return( <>\r\n    <h2>Counter</h2>\r\n     <HOCRed cmp={Counter}/>\r\n     <HOCGreen cmp={Counter}/>\r\n     <HOCBlue cmp={Counter}/>\r\n     </>)\r\n}\r\n\r\nfunction HOCRed(props){\r\n    return <div style={{backgroundColor:\"red\", color:\"white\",padding:\"1rem\"}}><props.cmp/></div>\r\n}\r\n\r\nfunction HOCGreen(props){\r\n    return <div style={{backgroundColor:\"green\", color:\"white\",padding:\"1rem\"}}><props.cmp/></div>\r\n}\r\n\r\nfunction HOCBlue(props){\r\n    return <div style={{backgroundColor:\"blue\", color:\"white\",padding:\"1rem\"}}><props.cmp/></div>\r\n}\r\n\r\nfunction Counter(){\r\n    let [data,setData] = useState(0)\r\n    return(\r\n        <>\r\n            <h2>{data}</h2>\r\n            <button onClick={()=>setData(data+1)}>Update</button>\r\n        </>\r\n    )\r\n}\r\n*/\n\n// React Router v6 tutorial in Hindi 1# getting started | installation\n// Router is used to make different pages and route to that page without loading the page\n/*\r\nimport React from \"react\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport Home from \"./Router Components/Home\";\r\nimport About from \"./Router Components/About\";\r\n\r\nconst App=()=>{\r\n    return(\r\n        <div>\r\n        <BrowserRouter>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Home/>}/>\r\n                <Route path=\"/about\" element={<About/>}/>\r\n            </Routes>\r\n        </BrowserRouter>\r\n        </div>\r\n    )\r\n}\r\n*/\n\n// Link is used to redirect the page\n// anchor tags works same as link but anchor tag reload the page then open our route but link dont reload the page.\n// React is single page website so it is not good to use a tag.\n// Link is used inside BrowserRouter.\n// 404 Page Not Found and Redirect\n// forexample hum ne navbar mei contact rakh dia per us ka page nae bnaya to us ke click pe humen ya to 404 page dikhe ya to humen wo home page pe bej de.\n//  path=\"/*\" it means agr hum ne kuch aur likh dia jis ka route nae bnaya to humen us pe wo dikha de.\n// <Route path=\"/*\" element={<Page404/>}/> this is used to redirect on 404 page\n//  <Route path=\"/*\" element={<Navigate to=\"/\"/>}/> this means ye humen navigate karde home page pe.\n// dynamic Routing with params in user and about page\n// dynamic routing means we just make one page and use for all it means if we have many users then jis bhi user ko click karen link mei us ka nam ae or page pe us ke details ae just ek user ka component bna kar.\n// Link and Nav Link style\n// WE cannot give className or style to link we have to use navLink instead of link as u see in navbar component i comment out code of link and use navlink\n// Active Link with class and with style i used both ways in navbar component\n// route by default add active class on active route  so we only add styling to active class\n/*\r\nimport React from \"react\";\r\nimport {BrowserRouter, Link, Navigate, Route, Routes} from \"react-router-dom\";\r\nimport Home from \"./Router Components/Home\";\r\nimport About from \"./Router Components/About\";\r\nimport Navbar from \"./Router Components/Navbar\";\r\nimport Page404 from \"./Router Components/Page404\";\r\nimport User from \"./Router Components/User\";\r\n\r\nconst App=()=>{\r\n    return(\r\n        <div>\r\n        <BrowserRouter>\r\n        // <Link to=\"/\">Home</Link> \r\n        <Navbar/>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Home/>}/>\r\n                <Route path=\"/about\" element={<About/>}/>\r\n                <Route path=\"/*\" element={<Page404/>}/>\r\n                //<Route path=\"/*\" element={<Navigate to=\"/\"/>}/>\r\n                <Route path=\"/user/:name\" element={<User/>}/>\r\n            </Routes>\r\n        </BrowserRouter>\r\n        </div>\r\n    )\r\n}\r\n\r\n*/\n\n// use SearchParams and setSearchParmas\n// Ye donen react-router-dom ke hooks hei react js ke nahi hei, reacts js ke packages ke bhi hooks hote hei.\n// react-router-dom package ha react js ka and useSearchParams hook ka react-router-dom ka\n// humare pas data 2 forms mei ate ha ek to http://localhost:3000/user/vanita ese jise hum params kahte hei aur dosra http://localhost:3000/filter?age=10 ese karke matlb query param ke form mei humen data pass karna hota ha or jab hum us data ko page mei access karna chahte hei to hum SearchParams use karte hei.\n// if we want to navigate on pages using btn not the link then we use react-router-dom hook named as useNavigate. Example as u see in home component\n// Nested Routing\n// It means route inside route as u see in contact page\n// First we create route for contact page\n// Inside contact page there are 3 pages comapny,channel and other we also define routes for these inside contact route. and to show pages in contact page we use outlet hook.\n//  useLocation Hooks | use Location\n// Use location hum use karte hei jab hum ek route se dosre route jarhe to hum dekhna chahte hei us route se kon kon se data dosre route mei gae ha\n// Jese about ke andr 2 users hei mene ek user ko click kia us ke data wala page open hogya ab us data wale page mei kon se state, props, hash, search, param gya ha sab mil jayega useLocation use karke ye humen poora object de deta. jese usesearchParam use kar rhe the srf parameter mil raha tha.\n// Hash bhi ek tareeka ka route ha hum # path bhi bna sakte route ka\n// As u see in about component\n/*\r\nimport React from \"react\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport Home from \"./Router Components/Home\";\r\nimport About from \"./Router Components/About\";\r\nimport Navbar from \"./Router Components/Navbar\";\r\nimport Page404 from \"./Router Components/Page404\";\r\nimport User from \"./Router Components/User\";\r\nimport Filter from \"./Router Components/Filter\";\r\nimport Contact from \"./Router Components/Contact\";\r\nimport Company from \"./Router Components/Company\";\r\nimport Channel from \"./Router Components/Channel\";\r\nimport Other from \"./Router Components/Other\";\r\n\r\n\r\nconst App=()=>{\r\n    return(\r\n        <div>\r\n        <BrowserRouter>\r\n        <Navbar/>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Home/>}/>\r\n                <Route path=\"/about\" element={<About/>}/>\r\n                <Route path=\"/*\" element={<Page404/>}/>\r\n                <Route path=\"/user/:name\" element={<User/>}/>\r\n                <Route path=\"/filter\" element={<Filter/>}/>\r\n\r\n                <Route path=\"/contact/\" element={<Contact/>}>\r\n                    <Route path=\"company\" element={<Company/>}/>\r\n                    <Route path=\"channel\" element={<Channel/>}/>\r\n                    <Route path=\"other\" element={<Other/>}/>\r\n                </Route>\r\n            </Routes>\r\n        </BrowserRouter>\r\n        </div>\r\n    )\r\n}\r\n*/\n\n//Protected Route\n// hum protected route use karte hei jab hum websites mei login karne ke bagair kuch na dikhane chahte ho. matlb k jab tak koe login nae karega tab tak wo humare pages ko access nae kar sakta or us pe click se login wala page open ho.\n// us ke liye hum localstorage ke andr ek item set kardete agr wo true hoga to page access hoga warna nae or ye login protect route ke componnet mei hum likh dengy jese wo sab pages ke liye common ho.\n/*\r\nimport React from \"react\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport Home from \"./Router Components/Home\";\r\nimport About from \"./Router Components/About\";\r\nimport Navbar from \"./Router Components/Navbar\";\r\nimport Page404 from \"./Router Components/Page404\";\r\nimport User from \"./Router Components/User\";\r\nimport Filter from \"./Router Components/Filter\";\r\nimport Contact from \"./Router Components/Contact\";\r\nimport Company from \"./Router Components/Company\";\r\nimport Channel from \"./Router Components/Channel\";\r\nimport Other from \"./Router Components/Other\";\r\nimport Login from \"./Router Components/Login\";\r\nimport Protected from \"./Router Components/Protected\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nconst App=()=>{\r\n    return(\r\n        <div>\r\n        <BrowserRouter>\r\n        <Navbar/>\r\n            <Routes>\r\n                <Route path=\"/login\" element={<Login/>}/>\r\n                <Route path=\"/\" element={<Protected Component={Home}/>}/>\r\n                <Route path=\"/about\" element={<Protected Component={About}/>}/>\r\n                <Route path=\"/filter\" element={<Protected Component={Filter}/>}/>\r\n                <Route path=\"/user/:name\" element={<User/>}/>\r\n                <Route path=\"/*\" element={<Page404/>}/>\r\n\r\n                <Route path=\"/contact/\" element={<Contact/>}>\r\n                    <Route path=\"company\" element={<Company/>}/>\r\n                    <Route path=\"channel\" element={<Channel/>}/>\r\n                    <Route path=\"other\" element={<Other/>}/>\r\n                </Route>\r\n            </Routes>\r\n        </BrowserRouter>\r\n        </div>\r\n    )\r\n}\r\nexport default App;\r\n*/\n\n// Apply array functions using state\n/*\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nconst App = () => {\r\n  let [data, setData] = useState([\r\n    { id: 1, name: \"watch\" },\r\n    { id: 2, name: \"bag\" },\r\n    { id: 3, name: \"shoes\" },\r\n    { id: 3, name: \"bag\" },\r\n  ]);\r\n  let [mydata, setMyData] = useState([\"watch\", \"bag\", \"shoes\", \"book\", \"bag\"]);\r\n\r\n\r\n//   Array methods\r\n\r\n  for (let element in data) {\r\n    console.log(\"Index with for in loop: \", element);\r\n    console.log(\"element with for in loop: \", data[element]);\r\n  }\r\n\r\n  for (let element of data) {\r\n    console.log(\"element with for of loop: \", element);\r\n  }\r\n\r\n  data.forEach((element, index) => {\r\n    console.log(\"element with for each loop: \", element);\r\n    console.log(\"index with for each loop: \", index);\r\n  });\r\n\r\n  console.log(mydata.indexOf(\"bag\"));\r\n  console.log(mydata.indexOf(\"bag\", 6));\r\n  console.log(mydata.lastIndexOf(\"bag\"));\r\n  console.log(mydata.includes(\"bag\"));\r\n\r\n  let findElem = data.find((item, index) => {\r\n    return item.name == \"bag\";\r\n  });\r\n  console.log(findElem);\r\n\r\n  let findIndex = data.findIndex((item, index) => {\r\n    return item.name == \"bag\";\r\n  });\r\n  console.log(findIndex);\r\n\r\n  let filterArray = data.filter((element, index) => {\r\n    return element.name === \"bag\";\r\n  });\r\n  console.log(filterArray);\r\n\r\n  console.log(data);\r\n  console.log(data.push({ id: 5, name: \"book\" }));\r\n  console.log(data);\r\n\r\n  console.log(data.unshift({ id: 0, name: \"Desk\" }));\r\n  console.log(data);\r\n\r\n  console.log(data.pop());\r\n  console.log(data);\r\n\r\n  console.log(data.shift());\r\n  console.log(data);\r\n\r\n\r\n//   Splice method task\r\n\r\nconst [months,setMonths] = useState([\"jan\",\"march\",\"april\",\"june\",\"july\"]);\r\nmonths.splice(months.length,1,\"dec\");\r\nconsole.log(months);\r\n\r\nlet indexMarch = months.findIndex((item)=>{ return item === \"march\"});\r\nconsole.log(indexMarch);\r\nmonths.splice(indexMarch, 1, \"March\");\r\nconsole.log(months);\r\n\r\nlet indexJune = months.findIndex((item)=>{ return item === \"june\"});\r\nconsole.log(indexJune);\r\nmonths.splice(indexJune, 1);\r\nconsole.log(months);\r\n\r\n// Map method\r\n\r\nlet mapArray = data.map((item,index)=>{\r\n    return`id is ${item.id} and name is ${item.name} at index ${index}`\r\n})\r\nconsole.log(mapArray);\r\n\r\n\r\n// Reduce method\r\n\r\nlet [number, setNum] = useState([2,3,4,5]);\r\nlet sum = number.reduce((accumulator,item,index)=>{\r\n    return accumulator+=item;\r\n})\r\nconsole.log(sum);\r\n\r\n  return (\r\n    <>\r\n      <h1>Hello</h1>\r\n      \r\n    </>\r\n  );\r\n};\r\n*/\n\n// foreach, map, filter, find, findIndex, splice, slice, reduce  using state update\n/*\r\n\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst App=()=>{\r\n\r\n  let [data, setData] = useState([\r\n    { id: 1, name: \"watch\" },\r\n    { id: 2, name: \"bag\" },\r\n    { id: 3, name: \"shoes\" },\r\n    { id: 4, name: \"bag\" },\r\n  ]);\r\n\r\n  let [number, setNum] = useState([2,3,4,5]);\r\n\r\n\r\n  function getWatch(){\r\n   let watchItem = data.filter((item)=>{\r\n        return item.name === \"watch\"\r\n    })\r\n\r\n    setData((prev)=>{\r\n        return watchItem;\r\n    })\r\n\r\n    let index  = data.findIndex((item2) => item2.name == \"watch\");\r\n    console.log(\"watchIndex\", index)\r\n    let element  = data.find((item2) => item2.name == \"watch\");\r\n    console.log(\"watchElement\", element)\r\n  }\r\n    \r\n\r\n  function getBag(){\r\n    let bagItem = data.filter((item)=> item.name == \"bag\");\r\n    setData((prev)=>{\r\n        return bagItem;\r\n    })\r\n  }\r\n\r\n  function getshoes(){\r\n    let shoeItem = data.filter((item)=> item.name === \"shoes\");\r\n    setData((prev)=> shoeItem)\r\n  }\r\n\r\n  function calculateSum(){\r\n    let sum = number.reduce((accumulator,currElem)=> accumulator+=currElem);\r\n    setNum((prev)=>{\r\n        return sum;\r\n    })\r\n  }\r\n\r\n\r\n\r\n  console.log(data)\r\n  return (\r\n    <>\r\n      <h1>Hello</h1>\r\n      <button onClick={() => getWatch()}>get watch</button><br/> \r\n      <button onClick={()=> getBag()}>get bag</button><br/>\r\n      <button onClick={()=> getshoes()}>get shoes</button><br/>\r\n    \r\n    <h1>filter method data</h1>\r\n    {\r\n        data?.map((item,index)=>{\r\n            return <> \r\n            <h6>Item is {item.name}</h6>\r\n            <p>Id is {item.id}</p>\r\n            </>\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n<h1>Slice method</h1>\r\n{\r\n    data.slice(0,2).map((item,index)=>{\r\n        return(\r\n            <>\r\n                <h6>{item.name}</h6>\r\n            </>\r\n        )\r\n    })\r\n}\r\n\r\n\r\n<h1> Reduce</h1>\r\n<h6>{ number }</h6>\r\n\r\n<button onClick={()=> calculateSum()}>Sum</button>\r\n   \r\n      \r\n    </>\r\n  );\r\n}\r\n*/\n\n// React Router DOM\n/*\r\nimport React from \"react\";\r\nimport Home from \"./Repeat Router/Home\";\r\nimport About from \"./Repeat Router/About\";\r\nimport Contact from \"./Repeat Router/Contact\";\r\nimport ErrorPage from \"./Repeat Router/ErrorPage\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport Menu from \"./Repeat Router/Menu\";\r\nimport User from \"./Repeat Router/User\";\r\n\r\nfunction Name(){\r\n    return <><h1>Hello, I am name page</h1></>\r\n}\r\nconst App=()=>{\r\n    return(\r\n        <>\r\n            <h1>React Router DOM</h1>\r\n            <Menu/>\r\n            <Routes>\r\n                <Route exact path=\"/\" Component={Home}/>\r\n                <Route path=\"/about\" Component={About}/>\r\n                <Route path=\"/user/:name\" Component={User}/>\r\n                <Route path=\"/contact\" Component={Contact}/>\r\n                <Route path=\"/contact/name\" Component={Name}/>\r\n                <Route Component={ErrorPage}/>\r\n\r\n            </Routes>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;\r\n*/\n\n// useMemo hook\n// Use to increase the performance\n// can return the memoized value\n// also store its returned value to any variable\n// We can stop the unwanted call like if any function is updated on count update but due to state it rerender on item update we can stop to rerender on item update by using useMemo it takes function and we can store it in variable and it also return some value.\n\n//where as usecallback is used to return the component or callback function or update the whole state of child component. simply when we have to return callback function then we use usecallback and when we have to return value then we use usememo.\n/*\r\nimport React from 'react'\r\nimport { useMemo } from 'react';\r\nimport { useState } from 'react'\r\n\r\nconst App = () => {\r\n    const [count, setCount] = useState(0);\r\n    const [item, setItem] = useState(10);\r\n\r\n    // function multiCount(){\r\n    //     console.log('multiCount')\r\n    //     return count*5;\r\n    // }\r\n\r\n    const multiCountMemo = useMemo(()=>{\r\n        console.log('multiCount')\r\n        return count*5;\r\n    },[count])\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>hello</h1>\r\n      <h2>Count: {count}</h2>\r\n      <h2>Item: {item}</h2>\r\n      // <h2>{multiCount()}</h2> \r\n      <h2>{multiCountMemo}</h2>\r\n\r\n      <button onClick={()=> setCount((prev)=> prev+1)}>Update count</button> <br/>\r\n      <button onClick={()=> setItem((prev)=> prev*10)}>Update Item</button>\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n*/\n\n// Ref & useRef Hooks | Controlled and Uncontrolled Form Components\n// Controlled component we say that an input field and that input field is controlled by name, value or onchange event (which is the best way).\n// Uncontrolled component like an input field just of type text no need to give other parameters then to get that input filed we use hooks named as REf and useRef.\n/*\r\nimport React, { useState } from 'react'\r\nimport { useRef } from 'react';\r\n\r\nconst App = () => {\r\n    const name = useRef(null);\r\n    const [show, setShow] = useState(false);\r\n\r\n    const formSubmitted = (e) => {\r\n        e.preventDefault();\r\n        console.log(name);\r\n        console.log(name.current);\r\n        console.log(name.current.value);\r\n        let value = name.current.value;\r\n        value=== \"\" ? alert(\"fill the data\") : setShow(true);\r\n    }\r\n\r\n  return (\r\n    <div>\r\n    <form action=\"\" onSubmit={formSubmitted}><br/>\r\n        <label htmlFor='luckyNum'>Enter your name</label> <br/>\r\n        <input type='text' id=\"name\" ref={name}/>\r\n        <br/><br/>\r\n        <button>Submit</button>\r\n    </form>\r\n\r\n    <p>{show? `My lucky name is ${name.current.value}` : \"\"}</p>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n*/\n\n// Login form \n/*\r\nimport React from 'react'\r\nimport { useState } from 'react';\r\n\r\nconst App = () => {\r\n    const [fullName, setName] = useState({\r\n        fname:\"\",\r\n        lname:\"\",\r\n    })\r\n\r\n    function formSubmitted(event){\r\n        event.preventDefault();\r\n    }\r\n\r\n    function handleInput(e){\r\n        // let value = e.target.value;\r\n        // let name = e.target.name;\r\n        const {value, name} = e.target\r\n        if(name == \"fname\"){\r\n            setName((prev)=>{\r\n                return{\r\n                    fname: value,\r\n                    lname: prev.lname\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            setName((prev)=>{\r\n                return{\r\n                    fname: prev.fname,\r\n                    lname: value\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n  return (\r\n    <>\r\n    <h1>Hello {fullName.fname} {fullName.lname}</h1>\r\n      <form onSubmit={formSubmitted}>\r\n        <input type='text' name='fname' value={fullName.fname} placeholder='Enter your First name' onChange={handleInput}/> <br/><br/>\r\n        <input type='text' name='lname' value={fullName.lname} placeholder='Enter your last name' onChange={handleInput}/><br/><br/>\r\n        <button type='submit'>Click me</button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n*/\n\n// use context api \n// It is used to pass the data from parent to any child component \n// there are 3 steps. 1st step is create context, make provider to parent , make consumer to component that use data.\n// To use this i have craeted compA, compB and compC\n// In compC i use context api \n// In compB i use usecontext hook\n/*\r\nimport React from 'react'\r\nimport CompA from './Components/CompA'\r\nimport { createContext } from 'react'\r\n\r\nconst FirstName = createContext();\r\nconst LastName = createContext();\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n<>\r\n<FirstName.Provider value={\"Vanita\"}>\r\n<LastName.Provider value={\"Chawla\"}>\r\n    <CompA/>\r\n    </LastName.Provider>\r\n    </FirstName.Provider>\r\n</>\r\n  )\r\n}\r\n\r\nexport default App;\r\nexport { FirstName, LastName };\r\n*/\n\n// HOC.. high order component\n// HOC wo component hota ha jo component as a input leta ha or component as a output return karta ha \n// agr humen ek counter banana ha per wo dikhana 3 bar ha aur 3no ke styling chnage ho to hum ek HOC component bna dengy jo wrapper ke tarah kam karega matlb component as a prop input lega or output bhi ek counter component return karega\n/*\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst App = () => {\r\n    \r\n\r\n  return (\r\n    <div>\r\n        <HOC cmp={Counter}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nfunction HOC(props){\r\n    return(<>\r\n<h1 style={{backgroundColor:\"red\"}}><props.cmp/></h1>\r\n    </>)\r\n}\r\n\r\nfunction Counter(){\r\n    const [counter, setCounter] = useState(0);\r\n    return(\r\n    <>\r\n    <h1>{counter}</h1>\r\n        <button onClick={()=> setCounter(counter+1)}>Update</button>\r\n\r\n    </>)\r\n}\r\n\r\nexport default App;\r\n*/\n\n// send data from child to parent\n// first pass the function from parent component \n// then pass the data as parameter in child component\n// then we can easily use that data in parent but in that function\n/*\r\nimport React from 'react'\r\nimport Lifting from './Components/Lifting'\r\n\r\nconst App = () => {\r\n\r\n    function parent(data){\r\n        alert(data)\r\n    }\r\n\r\n  return (\r\n    <>\r\n        <Lifting alert={parent}/>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default App;\r\n*/\n\n// forwardRef\n// we use useRef when we have to change the input value on button click but input and button both are in one component\n// now we use forwardRef, when we have a button in parent component and input in child componnet and we change input value on button click from parent\nimport React from 'react';\nimport { useRef } from 'react';\nimport Forward from './Components/Forward';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  let inputRef = useRef(null);\n  function changeInput() {}\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1952,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Forward, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1953,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeInput,\n      children: \"Click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1954,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"iD9XNNsNOlNDckBemnvlLS+aHYk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","Forward","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","inputRef","changeInput","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/React Practice/my-app/src/App.jsx"],"sourcesContent":["//  React Functional Components\r\n/*\r\nimport React from \"react\";\r\nimport Heading from \"./Components/Heading\";\r\nimport {Para} from \"./Components/Para\";\r\nimport OrderedList from \"./Components/OrderedList\";\r\n\r\nconst App = () =>{\r\n    return (\r\n        <>\r\n        <Heading/>\r\n        <Para/>\r\n         <OrderedList/>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// React class components\r\n/*\r\nimport React from \"react\";\r\nimport User from \"./Components/Classuser\";\r\nconst App = () =>{\r\n    return (\r\n        <>\r\n        <User/>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Create class component within same file\r\n// To create the class component we use key word class, extends from component, and must use render() methid and then return\r\n/*\r\nimport React,{Component} from \"react\";\r\nconst App = () =>{\r\n    return (\r\n        <>\r\n        <User/>\r\n        </>\r\n    )\r\n}\r\n\r\nclass User extends Component{\r\n    render(){\r\n        return(\r\n            <h1> hello...</h1>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\n// Component within component but we can use only that component not outside it and there are twe ways.\r\n/*\r\nimport React from \"react\";\r\nimport User from \"./Components/Classuser\";\r\nconst App = () =>{\r\n    function Other(){\r\n        return(\r\n            <><h1>Vanita Chawla</h1></>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n        <User/>\r\n        <Other/>\r\n        {Other()}\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Can we write the code without jsx and just using js. yes :) , here is example of only one div\r\n/*\r\nimport React from \"react\";\r\nconst App = () =>{\r\n\r\n    return React.createElement(\"div\",null,\"Hello this is my first div with out jsx\");\r\n    \r\n\r\n}\r\n*/\r\n\r\n// Now example of child inside div\r\n/*\r\nimport React from \"react\";\r\nconst App = () =>{\r\n\r\n    return React.createElement(\"div\",null,React.createElement(\"h1\",null,\"Hello this is my first div with out jsx\"));\r\n    \r\n\r\n}\r\n*/\r\n\r\n// Click event and function in ReactJs\r\n// Problem here is that if i click on button and my data variables changes but it shows first value not updated value why? here we use stats to change the state.\r\n// The reason why the data is not re-rendered onto the screen is because of functional components being stateless components. Stateless components cannot change their state during the runtime of the app, which means the components cannot be redrawn while the app is in action. If we console.log the data just after clicking the button by putting the {console.log(data)}, we will get the updated value of that data but we cannot see the updated value on the screen because the state is internally changed but the component did not render again due to its stateless nature.\r\n/*\r\nimport React from \"react\";\r\nfunction App(){\r\nlet data = \"Vanita chawla\"\r\n    function myfunc(){\r\n        data = \"Vini chawla\"\r\n        alert(\"function clicked!\")\r\n    }\r\n\r\n    return(\r\n      <>\r\n        <h1>{data}</h1>\r\n        <button onClick={myfunc}>Click me</button>\r\n        <button onClick={()=> alert(\"hi\")}>click me</button>\r\n        <button onClick={()=> myfunc()}>click me</button>\r\n      </>\r\n    )\r\n}\r\n*/\r\n\r\n//  State with functional component\r\n// State is object in which we store the data\r\n// As in above example when we use variable then component not update with click.\r\n// We use state to update the component, when we click on btn state changes then component updated because it understand state is changed.\r\n// When we use state then it again re-render the the jsx part/functional component when state changes\r\n// Usestate is hook to update the state.\r\n/*\r\nimport React,{useState} from \"react\";\r\nconst App=()=>{\r\n    const [data,setData] = useState(\"Vanita\");\r\n    const [count, setCount] = useState(0)\r\n    function updateData(){\r\n        setData(\"Chawla\");\r\n        setCount(count + 1);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h1>{data}</h1>\r\n            <p>{count}</p>\r\n            <button onClick={updateData}>Click me</button>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// State with class component (we cannot use useState here)\r\n// to use the state in class component i make a app component with class component not functional\r\n// In class component we use state for this we have to follow these steps\r\n// i) create constructor\r\n// ii) call parent constructor for this we use super();\r\n// iii) create state by using this\r\n// To make the function no need to use function keyword and call this function by using arrow function and this variable (e.g. ()=> this.updateData())\r\n// To update the state we write like this e.g. this.setState({data:\"chawla\"})\r\n// To display the data we write this.state.data\r\n// We cannot use state outside the component\r\n// State is public\r\n\r\n// for name update\r\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            data:\"Vanita\"\r\n        }\r\n    }\r\n\r\n    updateData(){\r\n        this.setState({\r\n            data:\"chawla\"\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n            <h1>{this.state.data}</h1>\r\n            <p>0</p>\r\n            <button onClick={()=> this.updateData()}>Click me</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\n// for counter\r\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            data:0\r\n        }\r\n    }\r\n\r\n    updateData(){\r\n        this.setState({\r\n            data:this.state.data + 1\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n            <h1>{this.state.data}</h1>\r\n            <button onClick={()=> this.updateData()}>Click me</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\n// Props with functional component\r\n// props arelike parameter we create component and send data to that component with helps of props or we can say send props to that component\r\n// We can only update the state here means in parent component not in child component (Student)\r\n// pass functions and html also\r\n/*\r\nimport React, { useState } from \"react\";\r\nimport Student from \"./Components/Student\";\r\n\r\nconst App=()=>{\r\n\r\n    let heading={\r\n        display:\"flex\",\r\n        flexDirection : \"column\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        gap:\"1rem\",\r\n        marginTop:\"1rem\"\r\n    }\r\n\r\n    const [name,setName] = useState(\"Vinita Chawla\");\r\n\r\n\r\n    function Apple(){\r\n        alert(\"Hello\")\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div style={heading}>\r\n            <h1>React props</h1>\r\n            <Student name={name} email={\"vini@gmail.com\"} func={Apple} other={{address:\"Ghotki\", role:\"Student\"}}\r\n                html= {<h1>This is HTML heading</h1>}\r\n            />\r\n        <button onClick={()=> setName(\"Vanita Chawla\")}>Update name</button>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Props in class component (Both ways 1-change state directly  2- change with function)\r\n/*\r\nimport React, { Component} from \"react\";\r\nimport ClassStudent from \"./Components/ClassStudent\";\r\n\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            name:\"Vanita Chawla\"\r\n        }\r\n    }\r\n \r\n    updateName(){\r\n        this.setState({name:\"Vini\"})\r\n    }\r\n\r\n    render(){\r\n        let heading={\r\n            display:\"flex\",\r\n            flexDirection : \"column\",\r\n            justifyContent : \"center\",\r\n            alignItems : \"center\",\r\n            gap:\"1rem\",\r\n            marginTop:\"1rem\"\r\n        }\r\n    \r\n        \r\n        return(\r\n            <>\r\n            <div style={heading}>\r\n                <h1>React props</h1>\r\n                <ClassStudent name={this.state.name} email=\"vini@gmail.com\"/>\r\n                <button onClick={()=> this.setState({name:\"vinita\"})}>Update name1</button>\r\n                <button onClick={()=> this.updateName()}>Update name2</button> \r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n*/\r\n\r\n// Get Input box value by changing the input or click on btn and then get value\r\n// One method\r\n/*\r\nimport React, { useState } from \"react\";\r\nconst App = ()=>{\r\n    const [data,setData] = useState(null);\r\n    const [value ,setValue] = useState(null);\r\n\r\n    function getValue(val){\r\n        console.log(val.target.value);\r\n        setData(val.target.value)\r\n    }\r\n\r\n    function btnClicked(){\r\n        alert(\"clicked\")\r\n        setValue(data);\r\n\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h1>Input Box value</h1>\r\n            <h1>With input change: {data}</h1>\r\n            <h1>With button click: {value}</h1>\r\n            <input type=\"text\" onChange={getValue}/>\r\n            <button onClick={btnClicked}>click me</button>\r\n\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Other method\r\n// When typing hide value by writing this statemenet setValue(false);\r\n/*\r\nimport React, { useState } from \"react\";\r\nconst App = ()=>{\r\n    const [data,setData] = useState(null);\r\n    const [value ,setValue] = useState(false);\r\n\r\n    function getValue(val){\r\n        console.log(val.target.value);\r\n        setData(val.target.value);\r\n        setValue(false);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h1>Input Box value</h1>\r\n            {value ? <h1>{data}</h1> : null}\r\n            <input type=\"text\" onChange={getValue}/>\r\n            <button onClick={()=>setValue(true)}>click me</button>\r\n\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Hide , Show and Toggle in ReactJs\r\n/*\r\nimport React, { useState } from \"react\";\r\nconst App = ()=>{\r\n    const [status, setStatus] = useState(true)\r\n    return(\r\n        <>\r\n           {status ? <h1>Hello Vanita!</h1> : null} \r\n            <button onClick={()=> setStatus(false)}>Hide</button>\r\n            <button onClick={()=> setStatus(true)}>Show</button>\r\n            <button onClick={()=> setStatus(!status)}>toggle</button>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Handle Form | checkbox | input field | select\r\n/*\r\nimport React, { useState } from \"react\";\r\n\r\nconst App=()=>{\r\n    const [name, setName] = useState(\"\");\r\n    const [lang, setLang] = useState(\"\");\r\n    const [terms, setTerms] = useState(false);\r\n    const [status, setStatus] = useState(false)\r\n\r\n\r\n    function formSubmitted(e){\r\n        console.log(name,lang,terms);\r\n        setStatus(true);\r\n        e.preventDefault();\r\n    }\r\n    return(\r\n        <>\r\n            <h1>Form Submission</h1>\r\n            <form onSubmit={formSubmitted}>\r\n            <input type=\"text\" placeholder=\"Enter Name\" onChange={(e)=> setName(e.target.value)}/> <br/><br/>\r\n            <select onChange={(e)=> setLang(e.target.value)}>\r\n                <option>Select Option</option>\r\n                <option>English</option>\r\n                <option>Sindhi</option>\r\n                <option>Urdu</option>\r\n            </select><br/><br/>\r\n            <input type=\"checkbox\" onChange={(e)=> setTerms(e.target.checked)}/><span>Terms & conditions</span><br/><br/>\r\n            <button type=\"submit\">Submit</button><br/><br/>\r\n           \r\n    </form>\r\n\r\n    {status ? <> \r\n            <h2>Output</h2>\r\n            <p>Name: {name}</p>\r\n            <p>Language: {lang}</p>\r\n            </> : \"\" }\r\n           \r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Conditional rendering | If Condition\r\n/*\r\nimport React from \"react\";\r\nimport Profile from \"./Components/Profile\";\r\n\r\nconst App=()=>{\r\n    return <Profile/>\r\n}\r\n\r\n*/\r\n\r\n// Basic Form validation\r\n/*\r\nimport React from \"react\";\r\nimport Login from \"./Components/Login\";\r\n\r\nconst App=()=>{\r\n    return <>\r\n    <Login/>\r\n    </>\r\n}\r\n*/\r\n\r\n// Challenge.... counter with increment, decrement and reset by using useState with previous state\r\n// With functional component\r\n/*\r\nimport React from \"react\";\r\nimport Counter from \"./Components/Counter\";\r\n\r\nconst App=()=>{\r\n    return <Counter/>\r\n}\r\n*/\r\n\r\n// With class component\r\n/*\r\nimport React from \"react\";\r\nimport ClassCounter from \"./Components/ClassCounter\";\r\n\r\nconst App=()=>{\r\n    return <ClassCounter/>\r\n}\r\n*/\r\n\r\n//challange... replace the array element with other\r\n/*\r\nimport React, { useState } from \"react\";\r\n\r\nconst App=()=>{\r\n  const [array, setArray] = useState([\"apple\",\" banana\",\" oranges\"]);\r\n\r\n  function replacElement(index, element){\r\n    setArray((prevValue)=>{\r\n        let newArray = [...prevValue]\r\n        newArray[index] = element\r\n        return newArray\r\n    })\r\n  }\r\n  \r\n    return <>\r\n    <h3>{array.map((fruit, index)=> <li id={index}>{fruit}</li>)}</h3> <br/>\r\n    <button onClick={()=> replacElement(0,\"mango\")}>Replace</button>\r\n   \r\n    </>\r\n}\r\n*/\r\n\r\n// Life cycle method used in react js\r\n// component is loaded (mounted)\r\n// When component is updated with state and props (updated)\r\n// when component is removed (Unmounted)\r\n// Question is when i remove the component then after reload life cycle start again or follow continued cycle. answer is it starts again from starting\r\n\r\n// 1) constructor life cycle method\r\n// This constructor life cycle method is used before the render method is called which contains html also so if we want something before render method then we use this constructor life cycle just like usestate which we define before render. in class component we define state in constructor b/c constructor automatically called after class.\r\n// We cant define api in constructor\r\n/* \r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            name:\"Vanita\"\r\n        }\r\n    }\r\n  render(){\r\n    return <h1>{this.state.name}</h1>\r\n  }\r\n}\r\n*/\r\n\r\n// 2) Render, life cycle method\r\n// Render method is called when\r\n// i. when component is created and called at start\r\n// ii. when states and props updated then\r\n/*\r\nimport React from \"react\";\r\nimport RenderCycle from \"./Components/RenderCycle\";\r\n\r\nconst App = ()=>{\r\n    return <RenderCycle email = \"vini@gmail.com\"/>\r\n}\r\n*/\r\n\r\n// 3) componentDidMount life cycle method\r\n// It is used when\r\n// i. all the html is completly loaded and now this method is called\r\n// ii. we call api in this method because api is called after loading of all the page\r\n// iii. this method is called when any thing is completely dependent on html so jese he html load hoge ye method call hojaega\r\n// it is called after the render method this method meaning sara component mount hojaega tab he ye method call hoga\r\n// jab component ko show ya hide karengy tab bhi ye use ho sakta a\r\n// ye method bs component ke load hone ke bad he chalta ha jab hum stats change karte tab render method dobara chalta ha per ye componentDidMount nahi chalta ye bas ek bar he chalta ha.tab he hum api ko es ke andr call karte hei kiyu k api srf ek bar he call ate ha after html/page reload.\r\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            name:\"Vanita\"\r\n        }\r\n        console.log(\"constructor\");\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"componentDidMount\");\r\n    }\r\n    render(){\r\n        console.log(\"render\");\r\n        return (\r\n        <>\r\n        <h1>componentDidMount</h1>\r\n        <p>{this.state.name}</p>\r\n        <button onClick={()=>{this.setState({name:\"vini\"})}}>Update</button>\r\n        </>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\n// 4)  componentDidUpdate life cycle method\r\n// Ye method tab chalta ha jab stats ya props update hote hei\r\n// when i click on button then stat changes and this function called\r\n// es ke andr hum api call karwa sakte hei per jab conditionally call karwane ho tou otherwise nae kar sakte other componentDidMount mei karwayengy\r\n\r\n// With name\r\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            name:\"vini\"\r\n        }\r\n\r\n        console.log(\"constructor\")\r\n\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log(\"componentDidUpdate\")\r\n    }\r\n\r\n    render(){\r\n        console.log(\"render\")\r\n\r\n        return(\r\n            <>\r\n                <h1>componentDidUpdate {this.state.name}</h1>\r\n                <button onClick={()=>{this.setState({name:\"chawla\"})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n*/\r\n\r\n// also with counter\r\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count:0\r\n        }\r\n\r\n        console.log(\"constructor\")\r\n\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log(\"componentDidUpdate\")\r\n    }\r\n\r\n    render(){\r\n        console.log(\"render\")\r\n\r\n        return(\r\n            <>\r\n                <h1>componentDidUpdate {this.state.count}</h1>\r\n                <button onClick={()=>{this.setState({count: this.state.count+1})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n*/\r\n\r\n// It also takes 3 parameter prevProps,prevState,snapshot\r\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count:0\r\n        }\r\n\r\n        console.log(\"constructor\")\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState,snapshot){\r\n        console.log(prevState)\r\n        console.log(prevState.count, this.state.count)\r\n        if(prevState.count === this.state.count){\r\n            alert(\"same!\")\r\n        }\r\n    }\r\n\r\n    render(){\r\n        console.log(\"render\")\r\n\r\n        return(\r\n            <>\r\n                <h1>componentDidUpdate {this.state.count}</h1>\r\n                <button onClick={()=>{this.setState({count:1})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n\r\n} \r\n*/\r\n\r\n// alse we can't update state without using any condition in this function. because it goes in infinite loop\r\n// Here in this example i use condition if it is less than 10 then loop works\r\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count:0\r\n        }\r\n\r\n        console.log(\"constructor\")\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState,snapshot){\r\n        console.log(prevState)\r\n        console.log(prevState.count, this.state.count)\r\n        if(this.state.count < 10){\r\n            this.setState({\r\n                count:this.state.count+1\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        console.log(\"render\")\r\n\r\n        return(\r\n            <>\r\n                <h1>componentDidUpdate {this.state.count}</h1>\r\n                <button onClick={()=>{this.setState({count:1})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n} \r\n*/\r\n\r\n// 5) shouldComponentUpdate life cycle method\r\n// Ye puchta ha k component ko update karna ha ya nae jese hum ne koe state change karwae to render method ya kise bhi life cycle method ko update karna ha ya nae ye hum condition mei bta sakte.\r\n// Hum specific condition deker stop karwa sakte k render method ab na update ho jese state 4 bar pe render update ho us ke bad nae\r\n// By default ye method component to update nae hone deta wo block kar deta ha jese hum click kar rhe state update console mei dikh rhe per output mei 0 he ha to jab hum return true karengy wo upadte hone dega. wo show es liye nahi hota kiyu k render method dobara chala he nae es ne update hone he nae dia.\r\n// Hum condition bhi laga sakte k srf  5 or 10 ke bech mei show ho render method update ho wese nahi ho\r\n// componentDidUpdate es ke bad call hota ha because ye decide karta tha render update hoga ya nae ek bar render update hwe to componentDidUpdate call hojaega.\r\n\r\n/*\r\nimport React, { Component } from \"react\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count:0\r\n        }\r\n\r\n        console.log(\"constructor\")\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(){\r\n        console.log(\"shouldComponentUpdate\", this.state.count);\r\n        if(this.state.count >0 && this.state.count < 5){\r\n            return true;\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        console.log(\"componentDidUpdate\")\r\n    }\r\n  \r\n\r\n    render(){\r\n        console.log(\"render\")\r\n\r\n        return(\r\n            <>\r\n                <h1>shouldComponentUpdate {this.state.count}</h1>\r\n                <button onClick={()=>{this.setState({count: this.state.count+1})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n*/\r\n\r\n// componentWillUnmount life cycle method\r\n// Ye method tab call hoga jab koe component dom se delete hoga\r\n// Jab hum component ko hide karte tab hum ye method call karwate\r\n// Us ke liye hum yhan child component bnaengy k jab button pe click ho child component remove ho fir ye method call hojae\r\n/*\r\nimport React, { Component } from \"react\";\r\nimport OneComponent from \"./Components/OneComponent\";\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            show:true\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                <h1>componentWillUnmount </h1>\r\n{\r\n    this.state.show ? <OneComponent/> : <h1> Child component removed!</h1>\r\n}\r\n            <button onClick={()=>{this.setState({show: !this.state.show})}}>Update</button>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n*/\r\n\r\n// Hooks\r\n// we use hooks to use the class components features in functional component like state, lifecycle etc\r\n// useEffect hook\r\n// useeffect hook functional component mei ek life cycle ke tarah hota ha jese life cycle class component mei the.\r\n// ab useEffect call hota ha jab component bne or stats ya props update hon per hum es mei condition bhi laga sakte k agr humare pas 4 stats hei to ye srf ek state ke change hone pe chale ya kise bhi state ke change hone pe na chale bas jab component bne tab chale.\r\n// Usereffect apne ap mei function leta a and hum 1 se ziyada bhi useEffect bna sakte\r\n\r\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\nfunction App(){\r\n    const [count,setCount] = useState(\"vini\")\r\n\r\n    useEffect(()=>{\r\n        console.log(\"useEffect\")\r\n    })\r\n    return(\r\n        <>\r\n        <h1>UseEffect {count}</h1>\r\n        <button onClick={()=>setCount(\"vinita\")}>update</button>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Ab hum yhan dekhengy k hum specific state or prop pe useEffect ko kese call kar sakte hei\r\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PropsEx from \"./Components/PropsEx\"\r\n\r\nconst App=()=>{\r\n    const [count,setCount] = useState(0);\r\n    const [data,setData] = useState(100);\r\n\r\n    useEffect(()=>{\r\n        console.log(\"useEffect for data\")\r\n    },[data])\r\n\r\n    useEffect(()=>{\r\n        console.log(\"useEffect for count\")\r\n    },[count])\r\n\r\n    return(\r\n        <>\r\n           <br/> <h1>UseEffect</h1> <br/>\r\n            <h3>Count :: {count}</h3> <br/>\r\n            <h3>Data :: {data}</h3><br/>\r\n            <PropsEx count={count} data={data}/> <br/>\r\n            <button onClick={()=> setCount(count+1)}>Update Count</button><br/>\r\n            <button onClick={()=> setData(data+1)}>Update Data</button>\r\n\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n//  style in ReactJs (2 ways already done ... inline, external)\r\n// Another is modular css\r\n/*\r\nimport React from \"react\";\r\nimport style from \"./custom.module.css\"\r\nconst App=()=>{\r\n    return(\r\n        <>\r\n            <h1 className={style.success} style={{display:\"flex\",justifyContent:\"center\"}}>hello</h1>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Install Bootstrap\r\n/*\r\nimport React from \"react\";\r\nimport { Button,Alert } from \"react-bootstrap\";\r\nconst App= ()=>{\r\n    return(\r\n        <>\r\n            <div>\r\n                <h1>Bootstrap</h1>\r\n            <Button onClick={()=> alert(\"hi\")}>Click Me</Button> <br/>\r\n            <Alert variant='warning'>\r\n                  This is a alert—check it out!\r\n        </Alert>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n//  Array Listing with Map function (because react don't support for loop inside return but outside return it works well.)\r\n// And list with bootstrap table\r\n/*\r\nimport React from \"react\";\r\nimport {Table} from 'react-bootstrap';\r\n\r\nlet array = [\"vini\", \"vanita\", \"vinita\", \"kato\", \"tidi\"];\r\nlet obj = [\r\n  { name: \"Vanita\", email: \"vanita@gmail.com\", contact: \"000\" },\r\n  { name: \"Vinita\", email: \"vinita@gmail.com\", contact: \"111\" },\r\n  { name: \"Vini\", email: \"vini@gmail.com\", contact: \"222\" },\r\n  { name: \"Kato\", email: \"kato@gmail.com\", contact: \"333\" },\r\n];\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <h1>Hello</h1>\r\n      {array.map((element) => {\r\n        return <h3>Name is : {element}</h3>;\r\n      })}\r\n      <Table striped bordered hover variant=\"dark\">\r\n      <thead>\r\n        <tr>\r\n        <th>ID</th>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n          <th>Contact</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {obj.map((element,index) => {\r\n          return (\r\n            <>\r\n              <tr key={index}>\r\n              <td>{index +1}</td>\r\n                <td>{element.name}</td>\r\n                <td>{element.email}</td>\r\n                <td>{element.contact}</td>\r\n              </tr>\r\n            </>\r\n          );\r\n        })}\r\n        \r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n*/\r\n\r\n// Nested List in ReactJs\r\n/*\r\nimport React from \"react\";\r\nimport {Table} from 'react-bootstrap';\r\nlet obj = [\r\n  { name: \"Vanita\", email: \"vanita@gmail.com\", contact: \"000\", address:[\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n  ] },\r\n  { name: \"Vinita\", email: \"vinita@gmail.com\", contact: \"111\",address:[\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n  ] },\r\n  { name: \"Vini\", email: \"vini@gmail.com\", contact: \"222\", address:[\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n  ] },\r\n  { name: \"Kato\", email: \"kato@gmail.com\", contact: \"333\", address:[\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n    {houseNo : 5,city: \"Ghotki\",country : \"Pakistan\"},\r\n  ]  },\r\n];\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <h1>Hello</h1>\r\n      \r\n      <Table striped bordered hover variant=\"dark\">\r\n      <thead>\r\n        <tr>\r\n        <th>ID</th>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n          <th>Contact</th>\r\n          <th>Address</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n      \r\n    {\r\n       obj.map((element,index)=>{\r\n       return(\r\n        <tr key={index}>\r\n         <td>{index+1}</td>\r\n          <td>{element.name}</td>\r\n          <td>{element.email}</td>\r\n          <td>{element.contact}</td>\r\n          <td>\r\n         <Table striped bordered hover variant=\"dark\">\r\n         <tbody>\r\n            {\r\n                element.address.map((item)=>{\r\n                   return(\r\n                    <tr>\r\n                    <td>{item.houseNo}</td>\r\n                  <td>{item.city}</td>\r\n                  <td>{item.country}</td>\r\n                    </tr>\r\n                   )\r\n                })\r\n            }\r\n            </tbody>\r\n            </Table>\r\n          </td>\r\n        </tr>\r\n       )\r\n       })\r\n    }\r\n        \r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n*/\r\n\r\n// Reuse component in loop\r\n/*\r\nimport React from \"react\";\r\nimport TableEx from \"./Components/TableEx\";\r\nimport {Table} from 'react-bootstrap';\r\n\r\nlet obj = [\r\n  { name: \"Vanita\", email: \"vanita@gmail.com\", contact: \"000\" },\r\n  { name: \"Vinita\", email: \"vinita@gmail.com\", contact: \"111\" },\r\n  { name: \"Vini\", email: \"vini@gmail.com\", contact: \"222\" },\r\n  { name: \"Kato\", email: \"kato@gmail.com\", contact: \"333\" },\r\n];\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <h1>Hello</h1>\r\n    <Table striped bordered hover variant=\"dark\">\r\n    <thead>\r\n        <tr>\r\n        <th>ID</th>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n          <th>Contact</th>\r\n        </tr>\r\n        </thead>\r\n   <tbody>\r\n    {\r\n        obj.map((item,i)=>{\r\n            function btnClicked(){\r\n              alert(item.name)\r\n    }\r\n            return <TableEx index={i} data={item} func={btnClicked}/>\r\n        })\r\n    }\r\n</tbody>\r\n    </Table>\r\n    </>\r\n  );\r\n};\r\n*/\r\n\r\n// Send Data Child to Parent Component or lifting state up\r\n/*\r\nimport React from \"react\";\r\nimport LiftingState from \"./Components/LiftingState\";\r\nconst App=()=>{\r\n    function parentAlert(data){\r\n        console.log(data)\r\n        alert(\"parentAlert \"+ data.name)\r\n    }\r\n    return(\r\n        <>\r\n            <h1>Hello</h1>\r\n            <LiftingState alert={parentAlert}/>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Pure component\r\n// Ye ek feature ha jo hum import karke use karte hei per ye srf class components ke liye hota a\r\n// pure component, component ke re-rendering ko rokta ha jese hum ne btn click se name change karwaya per wo name same ha pahle jesa to ye pahle check karega agr wo same ha to re-rendering nae karwayega warna karwayega.\r\n// every time it shows 1 so that purecomponent stop from rerender everytime.\r\n// We can do same for props\r\n/*\r\nimport React, { Component, PureComponent } from \"react\";\r\nclass App extends PureComponent{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count: 1\r\n        }\r\n    }\r\n\r\n    render(){\r\n        console.log(\"Check rendering\")\r\n        return(\r\n            <>\r\n                <h1>Count is {this.state.count}</h1>\r\n                <button onClick={()=> this.setState({count:1})}>click me</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\n// useMemo Hook\r\n// this is used to prevent the unwanted call of functions or unwanted re-rendering of component\r\n// When i click on update count then function called and then i click on update item agin the function called which is un wanted to prevent this we use memo and tell that only when count updated this function called.\r\n// first we use this <h2>{countUpdate()}</h2> then after memo  <h2>{newUseMemo}</h2>\r\n/*\r\nimport React, { useState,useMemo } from \"react\";\r\n\r\nconst App =()=>{\r\n    const [count,setCount] = useState(1);\r\n    const [item,setItem] = useState(1);\r\n\r\nconst newUseMemo = useMemo( function countUpdate(){\r\n    console.log(\"countUpdate\")\r\n    return count*5;\r\n},[count])\r\n   \r\n\r\n    return(\r\n        <>\r\n            <h1>Hello</h1>\r\n            <h2>count is {count}</h2>\r\n            <h2>item is {item}</h2>\r\n            <h2>{newUseMemo}</h2>\r\n            <button onClick={()=>setCount(count+1)}>Update count</button> <br/>\r\n            <button onClick={()=>setItem(item*10)}>Update item</button>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Ref with Example (for class components)\r\n// Ref zabardasti dom ko manipulate kar sakta ha jese k color change karna input ke value ko change karna ya aur bhi bhut kuch per react humen directly dom ko manipulate karne se manah karta kiyu k performance kharab hote es liye hum ref ko kam use karte.\r\n// console.log(this.inputRef) ye humen us element ke sare properties de deta.\r\n/*\r\nimport React, { Component,createRef } from \"react\"; \r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.inputRef = createRef();\r\n    }\r\n\r\n    getValue(){\r\n        console.log(this.inputRef)\r\n        console.log(this.inputRef.current.value)\r\n        this.inputRef.current.style.color=\"white\"\r\n        this.inputRef.current.style.backgroundColor=\"black\"\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n                <h1>Hello</h1> \r\n                <input type=\"text\" ref={this.inputRef}/> <br/>\r\n                <button onClick={()=>this.getValue()}>Click</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\n// useRef Hook example\r\n// useRef bhi same he kam karta ha dom ke andr manipulation ke liye use hota ha\r\n/*\r\nimport React, { useRef } from \"react\";\r\nconst App=()=>{\r\n    let inputRef = useRef(null);\r\n    function getValue(){\r\n        console.log(inputRef);\r\n        inputRef.current.value = \"Vanita\"\r\n        inputRef.current.focus();\r\n        inputRef.current.style.color=\"white\"\r\n        inputRef.current.style.backgroundColor=\"black\"\r\n\r\n    }\r\n    return(\r\n        <>\r\n            <h1>Hello</h1> \r\n            <input type=\"text\" ref={inputRef}/> <br/>\r\n            <button onClick={()=>getValue()}>Click</button>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// forwardRef example\r\n// now useRef is used to manipulate the dom but here we want to send the inputRef from parent to child component, the useRef is used to send the ref and forward ref is used in child component to receive the ref.\r\n// forward ref is itself wrapper\r\n// we can also use forwardRef for class components\r\n/*\r\nimport React, { useRef } from \"react\";\r\nimport UserRef from \"./Components/UserRef\";\r\nconst App=()=>{\r\n    let inputRef = useRef(null);\r\n    function getValue(){\r\n        console.log(inputRef);\r\n        console.log(inputRef.current.value);\r\n        inputRef.current.value = \"Vanita\"\r\n        inputRef.current.focus();\r\n        inputRef.current.style.color=\"white\"\r\n        inputRef.current.style.backgroundColor=\"black\"\r\n\r\n    }\r\n    return(\r\n        <>\r\n            <h1>Hello</h1> \r\n            <UserRef ref={inputRef}/>\r\n            <button onClick={()=>getValue()}>Click</button>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Controlled Component\r\n// controlled component input ya form ke andr input elements ko kahte hei or jimhen hum react js ke andr state ke through manipulate karen jese input ke value change karwa den ya color wagera karwa den.\r\n// Aur uncontrolled component input ya form ke andr input elements hote hei jo hum directly dom se manipulate karwa kar change karte jese jquery ke andr id pass karwa kar, js ke andr element ko get karke ya fir react js ke andr usereF ko use karke.\r\n// Ye class or functional component donon ke liye use ho sakta\r\n/*\r\nimport React, { useState } from \"react\";\r\nconst App=()=>{\r\n    const [data,setData] = useState(\"000\");\r\n    return(\r\n        <>\r\n            <h1>Hello</h1> \r\n            <input type=\"text\" value={data} onChange={(e)=> setData(e.target.value)}/> <br/>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Uncontrolled Component\r\n// State ke elawa hum kese bhi input filed ko manipulate karen wo uncontrolled componnet hota ha\r\n// Ye class or functional component donon ke liye use ho sakta\r\n/*\r\nimport React, { useRef } from \"react\";\r\nconst App=()=>{\r\n    let inputRef = useRef();\r\n    let inputRef2 = useRef();\r\n\r\n    function formSubmitted(e){\r\n        e.preventDefault();\r\n        console.log(\"Input field 1 value: \" + inputRef.current.value);\r\n        console.log(\"Input field 2 value: \" + inputRef2.current.value)\r\n       let inputVal = document.getElementById(\"input3\").value;\r\n       console.log(\"Input field 3 value: \"+ inputVal)\r\n    }\r\n    return(\r\n        <>\r\n             <h1>Hello</h1> \r\n             <form onSubmit={formSubmitted}>\r\n                <input type=\"text\" ref={inputRef} /> <br/><br/>\r\n                <input type=\"text\" ref={inputRef2} /><br/><br/>\r\n                <input type=\"text\" id=\"input3\" /><br/><br/>\r\n                <button>Submit</button>\r\n             </form>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// Hight order component (HOC)\r\n// humen ek counter banana ha per sab ke alag se styling ho to humen conditions lagane parhegi, ab hum kitne conditions lagaen gy us se bachne ke liye hum ek HOC component(Wrapper componnet) bnaengy, HOC component ka kam hota ha k wo component as a input lega or kuch functionality laga kar component as a output return karega.\r\n// hum yhan 2 component bnaengy counter ka aur HOC ka\r\n// Ab hum app component ke andr HOC show karwa rahe jo counter as a props input jarha or bad mei humen wo counter return horha props.cmp karke.\r\n// Ese he hum HOC bna kar ek he counter different styling ke sath use kar sakte.\r\n/*\r\nimport React, { useState } from \"react\";\r\nconst App=()=>{\r\n    return( <>\r\n    <h2>Counter</h2>\r\n     <HOCRed cmp={Counter}/>\r\n     <HOCGreen cmp={Counter}/>\r\n     <HOCBlue cmp={Counter}/>\r\n     </>)\r\n}\r\n\r\nfunction HOCRed(props){\r\n    return <div style={{backgroundColor:\"red\", color:\"white\",padding:\"1rem\"}}><props.cmp/></div>\r\n}\r\n\r\nfunction HOCGreen(props){\r\n    return <div style={{backgroundColor:\"green\", color:\"white\",padding:\"1rem\"}}><props.cmp/></div>\r\n}\r\n\r\nfunction HOCBlue(props){\r\n    return <div style={{backgroundColor:\"blue\", color:\"white\",padding:\"1rem\"}}><props.cmp/></div>\r\n}\r\n\r\nfunction Counter(){\r\n    let [data,setData] = useState(0)\r\n    return(\r\n        <>\r\n            <h2>{data}</h2>\r\n            <button onClick={()=>setData(data+1)}>Update</button>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n// React Router v6 tutorial in Hindi 1# getting started | installation\r\n// Router is used to make different pages and route to that page without loading the page\r\n/*\r\nimport React from \"react\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport Home from \"./Router Components/Home\";\r\nimport About from \"./Router Components/About\";\r\n\r\nconst App=()=>{\r\n    return(\r\n        <div>\r\n        <BrowserRouter>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Home/>}/>\r\n                <Route path=\"/about\" element={<About/>}/>\r\n            </Routes>\r\n        </BrowserRouter>\r\n        </div>\r\n    )\r\n}\r\n*/\r\n\r\n// Link is used to redirect the page\r\n// anchor tags works same as link but anchor tag reload the page then open our route but link dont reload the page.\r\n// React is single page website so it is not good to use a tag.\r\n// Link is used inside BrowserRouter.\r\n// 404 Page Not Found and Redirect\r\n// forexample hum ne navbar mei contact rakh dia per us ka page nae bnaya to us ke click pe humen ya to 404 page dikhe ya to humen wo home page pe bej de.\r\n//  path=\"/*\" it means agr hum ne kuch aur likh dia jis ka route nae bnaya to humen us pe wo dikha de.\r\n// <Route path=\"/*\" element={<Page404/>}/> this is used to redirect on 404 page\r\n//  <Route path=\"/*\" element={<Navigate to=\"/\"/>}/> this means ye humen navigate karde home page pe.\r\n// dynamic Routing with params in user and about page\r\n// dynamic routing means we just make one page and use for all it means if we have many users then jis bhi user ko click karen link mei us ka nam ae or page pe us ke details ae just ek user ka component bna kar.\r\n// Link and Nav Link style\r\n// WE cannot give className or style to link we have to use navLink instead of link as u see in navbar component i comment out code of link and use navlink\r\n// Active Link with class and with style i used both ways in navbar component\r\n// route by default add active class on active route  so we only add styling to active class\r\n/*\r\nimport React from \"react\";\r\nimport {BrowserRouter, Link, Navigate, Route, Routes} from \"react-router-dom\";\r\nimport Home from \"./Router Components/Home\";\r\nimport About from \"./Router Components/About\";\r\nimport Navbar from \"./Router Components/Navbar\";\r\nimport Page404 from \"./Router Components/Page404\";\r\nimport User from \"./Router Components/User\";\r\n\r\nconst App=()=>{\r\n    return(\r\n        <div>\r\n        <BrowserRouter>\r\n        // <Link to=\"/\">Home</Link> \r\n        <Navbar/>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Home/>}/>\r\n                <Route path=\"/about\" element={<About/>}/>\r\n                <Route path=\"/*\" element={<Page404/>}/>\r\n                //<Route path=\"/*\" element={<Navigate to=\"/\"/>}/>\r\n                <Route path=\"/user/:name\" element={<User/>}/>\r\n            </Routes>\r\n        </BrowserRouter>\r\n        </div>\r\n    )\r\n}\r\n\r\n*/\r\n\r\n// use SearchParams and setSearchParmas\r\n// Ye donen react-router-dom ke hooks hei react js ke nahi hei, reacts js ke packages ke bhi hooks hote hei.\r\n// react-router-dom package ha react js ka and useSearchParams hook ka react-router-dom ka\r\n// humare pas data 2 forms mei ate ha ek to http://localhost:3000/user/vanita ese jise hum params kahte hei aur dosra http://localhost:3000/filter?age=10 ese karke matlb query param ke form mei humen data pass karna hota ha or jab hum us data ko page mei access karna chahte hei to hum SearchParams use karte hei.\r\n// if we want to navigate on pages using btn not the link then we use react-router-dom hook named as useNavigate. Example as u see in home component\r\n// Nested Routing\r\n// It means route inside route as u see in contact page\r\n// First we create route for contact page\r\n// Inside contact page there are 3 pages comapny,channel and other we also define routes for these inside contact route. and to show pages in contact page we use outlet hook.\r\n//  useLocation Hooks | use Location\r\n// Use location hum use karte hei jab hum ek route se dosre route jarhe to hum dekhna chahte hei us route se kon kon se data dosre route mei gae ha\r\n// Jese about ke andr 2 users hei mene ek user ko click kia us ke data wala page open hogya ab us data wale page mei kon se state, props, hash, search, param gya ha sab mil jayega useLocation use karke ye humen poora object de deta. jese usesearchParam use kar rhe the srf parameter mil raha tha.\r\n// Hash bhi ek tareeka ka route ha hum # path bhi bna sakte route ka\r\n// As u see in about component\r\n/*\r\nimport React from \"react\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport Home from \"./Router Components/Home\";\r\nimport About from \"./Router Components/About\";\r\nimport Navbar from \"./Router Components/Navbar\";\r\nimport Page404 from \"./Router Components/Page404\";\r\nimport User from \"./Router Components/User\";\r\nimport Filter from \"./Router Components/Filter\";\r\nimport Contact from \"./Router Components/Contact\";\r\nimport Company from \"./Router Components/Company\";\r\nimport Channel from \"./Router Components/Channel\";\r\nimport Other from \"./Router Components/Other\";\r\n\r\n\r\nconst App=()=>{\r\n    return(\r\n        <div>\r\n        <BrowserRouter>\r\n        <Navbar/>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Home/>}/>\r\n                <Route path=\"/about\" element={<About/>}/>\r\n                <Route path=\"/*\" element={<Page404/>}/>\r\n                <Route path=\"/user/:name\" element={<User/>}/>\r\n                <Route path=\"/filter\" element={<Filter/>}/>\r\n\r\n                <Route path=\"/contact/\" element={<Contact/>}>\r\n                    <Route path=\"company\" element={<Company/>}/>\r\n                    <Route path=\"channel\" element={<Channel/>}/>\r\n                    <Route path=\"other\" element={<Other/>}/>\r\n                </Route>\r\n            </Routes>\r\n        </BrowserRouter>\r\n        </div>\r\n    )\r\n}\r\n*/\r\n\r\n//Protected Route\r\n// hum protected route use karte hei jab hum websites mei login karne ke bagair kuch na dikhane chahte ho. matlb k jab tak koe login nae karega tab tak wo humare pages ko access nae kar sakta or us pe click se login wala page open ho.\r\n// us ke liye hum localstorage ke andr ek item set kardete agr wo true hoga to page access hoga warna nae or ye login protect route ke componnet mei hum likh dengy jese wo sab pages ke liye common ho.\r\n/*\r\nimport React from \"react\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport Home from \"./Router Components/Home\";\r\nimport About from \"./Router Components/About\";\r\nimport Navbar from \"./Router Components/Navbar\";\r\nimport Page404 from \"./Router Components/Page404\";\r\nimport User from \"./Router Components/User\";\r\nimport Filter from \"./Router Components/Filter\";\r\nimport Contact from \"./Router Components/Contact\";\r\nimport Company from \"./Router Components/Company\";\r\nimport Channel from \"./Router Components/Channel\";\r\nimport Other from \"./Router Components/Other\";\r\nimport Login from \"./Router Components/Login\";\r\nimport Protected from \"./Router Components/Protected\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nconst App=()=>{\r\n    return(\r\n        <div>\r\n        <BrowserRouter>\r\n        <Navbar/>\r\n            <Routes>\r\n                <Route path=\"/login\" element={<Login/>}/>\r\n                <Route path=\"/\" element={<Protected Component={Home}/>}/>\r\n                <Route path=\"/about\" element={<Protected Component={About}/>}/>\r\n                <Route path=\"/filter\" element={<Protected Component={Filter}/>}/>\r\n                <Route path=\"/user/:name\" element={<User/>}/>\r\n                <Route path=\"/*\" element={<Page404/>}/>\r\n\r\n                <Route path=\"/contact/\" element={<Contact/>}>\r\n                    <Route path=\"company\" element={<Company/>}/>\r\n                    <Route path=\"channel\" element={<Channel/>}/>\r\n                    <Route path=\"other\" element={<Other/>}/>\r\n                </Route>\r\n            </Routes>\r\n        </BrowserRouter>\r\n        </div>\r\n    )\r\n}\r\nexport default App;\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Apply array functions using state\r\n/*\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nconst App = () => {\r\n  let [data, setData] = useState([\r\n    { id: 1, name: \"watch\" },\r\n    { id: 2, name: \"bag\" },\r\n    { id: 3, name: \"shoes\" },\r\n    { id: 3, name: \"bag\" },\r\n  ]);\r\n  let [mydata, setMyData] = useState([\"watch\", \"bag\", \"shoes\", \"book\", \"bag\"]);\r\n\r\n\r\n//   Array methods\r\n\r\n  for (let element in data) {\r\n    console.log(\"Index with for in loop: \", element);\r\n    console.log(\"element with for in loop: \", data[element]);\r\n  }\r\n\r\n  for (let element of data) {\r\n    console.log(\"element with for of loop: \", element);\r\n  }\r\n\r\n  data.forEach((element, index) => {\r\n    console.log(\"element with for each loop: \", element);\r\n    console.log(\"index with for each loop: \", index);\r\n  });\r\n\r\n  console.log(mydata.indexOf(\"bag\"));\r\n  console.log(mydata.indexOf(\"bag\", 6));\r\n  console.log(mydata.lastIndexOf(\"bag\"));\r\n  console.log(mydata.includes(\"bag\"));\r\n\r\n  let findElem = data.find((item, index) => {\r\n    return item.name == \"bag\";\r\n  });\r\n  console.log(findElem);\r\n\r\n  let findIndex = data.findIndex((item, index) => {\r\n    return item.name == \"bag\";\r\n  });\r\n  console.log(findIndex);\r\n\r\n  let filterArray = data.filter((element, index) => {\r\n    return element.name === \"bag\";\r\n  });\r\n  console.log(filterArray);\r\n\r\n  console.log(data);\r\n  console.log(data.push({ id: 5, name: \"book\" }));\r\n  console.log(data);\r\n\r\n  console.log(data.unshift({ id: 0, name: \"Desk\" }));\r\n  console.log(data);\r\n\r\n  console.log(data.pop());\r\n  console.log(data);\r\n\r\n  console.log(data.shift());\r\n  console.log(data);\r\n\r\n\r\n//   Splice method task\r\n\r\nconst [months,setMonths] = useState([\"jan\",\"march\",\"april\",\"june\",\"july\"]);\r\nmonths.splice(months.length,1,\"dec\");\r\nconsole.log(months);\r\n\r\nlet indexMarch = months.findIndex((item)=>{ return item === \"march\"});\r\nconsole.log(indexMarch);\r\nmonths.splice(indexMarch, 1, \"March\");\r\nconsole.log(months);\r\n\r\nlet indexJune = months.findIndex((item)=>{ return item === \"june\"});\r\nconsole.log(indexJune);\r\nmonths.splice(indexJune, 1);\r\nconsole.log(months);\r\n\r\n// Map method\r\n\r\nlet mapArray = data.map((item,index)=>{\r\n    return`id is ${item.id} and name is ${item.name} at index ${index}`\r\n})\r\nconsole.log(mapArray);\r\n\r\n\r\n// Reduce method\r\n\r\nlet [number, setNum] = useState([2,3,4,5]);\r\nlet sum = number.reduce((accumulator,item,index)=>{\r\n    return accumulator+=item;\r\n})\r\nconsole.log(sum);\r\n\r\n  return (\r\n    <>\r\n      <h1>Hello</h1>\r\n      \r\n    </>\r\n  );\r\n};\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n// foreach, map, filter, find, findIndex, splice, slice, reduce  using state update\r\n/*\r\n\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst App=()=>{\r\n\r\n  let [data, setData] = useState([\r\n    { id: 1, name: \"watch\" },\r\n    { id: 2, name: \"bag\" },\r\n    { id: 3, name: \"shoes\" },\r\n    { id: 4, name: \"bag\" },\r\n  ]);\r\n\r\n  let [number, setNum] = useState([2,3,4,5]);\r\n\r\n\r\n  function getWatch(){\r\n   let watchItem = data.filter((item)=>{\r\n        return item.name === \"watch\"\r\n    })\r\n\r\n    setData((prev)=>{\r\n        return watchItem;\r\n    })\r\n\r\n    let index  = data.findIndex((item2) => item2.name == \"watch\");\r\n    console.log(\"watchIndex\", index)\r\n    let element  = data.find((item2) => item2.name == \"watch\");\r\n    console.log(\"watchElement\", element)\r\n  }\r\n    \r\n\r\n  function getBag(){\r\n    let bagItem = data.filter((item)=> item.name == \"bag\");\r\n    setData((prev)=>{\r\n        return bagItem;\r\n    })\r\n  }\r\n\r\n  function getshoes(){\r\n    let shoeItem = data.filter((item)=> item.name === \"shoes\");\r\n    setData((prev)=> shoeItem)\r\n  }\r\n\r\n  function calculateSum(){\r\n    let sum = number.reduce((accumulator,currElem)=> accumulator+=currElem);\r\n    setNum((prev)=>{\r\n        return sum;\r\n    })\r\n  }\r\n\r\n\r\n\r\n  console.log(data)\r\n  return (\r\n    <>\r\n      <h1>Hello</h1>\r\n      <button onClick={() => getWatch()}>get watch</button><br/> \r\n      <button onClick={()=> getBag()}>get bag</button><br/>\r\n      <button onClick={()=> getshoes()}>get shoes</button><br/>\r\n    \r\n    <h1>filter method data</h1>\r\n    {\r\n        data?.map((item,index)=>{\r\n            return <> \r\n            <h6>Item is {item.name}</h6>\r\n            <p>Id is {item.id}</p>\r\n            </>\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n<h1>Slice method</h1>\r\n{\r\n    data.slice(0,2).map((item,index)=>{\r\n        return(\r\n            <>\r\n                <h6>{item.name}</h6>\r\n            </>\r\n        )\r\n    })\r\n}\r\n\r\n\r\n<h1> Reduce</h1>\r\n<h6>{ number }</h6>\r\n\r\n<button onClick={()=> calculateSum()}>Sum</button>\r\n   \r\n      \r\n    </>\r\n  );\r\n}\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n// React Router DOM\r\n/*\r\nimport React from \"react\";\r\nimport Home from \"./Repeat Router/Home\";\r\nimport About from \"./Repeat Router/About\";\r\nimport Contact from \"./Repeat Router/Contact\";\r\nimport ErrorPage from \"./Repeat Router/ErrorPage\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport Menu from \"./Repeat Router/Menu\";\r\nimport User from \"./Repeat Router/User\";\r\n\r\nfunction Name(){\r\n    return <><h1>Hello, I am name page</h1></>\r\n}\r\nconst App=()=>{\r\n    return(\r\n        <>\r\n            <h1>React Router DOM</h1>\r\n            <Menu/>\r\n            <Routes>\r\n                <Route exact path=\"/\" Component={Home}/>\r\n                <Route path=\"/about\" Component={About}/>\r\n                <Route path=\"/user/:name\" Component={User}/>\r\n                <Route path=\"/contact\" Component={Contact}/>\r\n                <Route path=\"/contact/name\" Component={Name}/>\r\n                <Route Component={ErrorPage}/>\r\n\r\n            </Routes>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;\r\n*/\r\n\r\n\r\n\r\n\r\n// useMemo hook\r\n// Use to increase the performance\r\n// can return the memoized value\r\n// also store its returned value to any variable\r\n// We can stop the unwanted call like if any function is updated on count update but due to state it rerender on item update we can stop to rerender on item update by using useMemo it takes function and we can store it in variable and it also return some value.\r\n\r\n//where as usecallback is used to return the component or callback function or update the whole state of child component. simply when we have to return callback function then we use usecallback and when we have to return value then we use usememo.\r\n/*\r\nimport React from 'react'\r\nimport { useMemo } from 'react';\r\nimport { useState } from 'react'\r\n\r\nconst App = () => {\r\n    const [count, setCount] = useState(0);\r\n    const [item, setItem] = useState(10);\r\n\r\n    // function multiCount(){\r\n    //     console.log('multiCount')\r\n    //     return count*5;\r\n    // }\r\n\r\n    const multiCountMemo = useMemo(()=>{\r\n        console.log('multiCount')\r\n        return count*5;\r\n    },[count])\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>hello</h1>\r\n      <h2>Count: {count}</h2>\r\n      <h2>Item: {item}</h2>\r\n      // <h2>{multiCount()}</h2> \r\n      <h2>{multiCountMemo}</h2>\r\n\r\n      <button onClick={()=> setCount((prev)=> prev+1)}>Update count</button> <br/>\r\n      <button onClick={()=> setItem((prev)=> prev*10)}>Update Item</button>\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n*/\r\n\r\n// Ref & useRef Hooks | Controlled and Uncontrolled Form Components\r\n// Controlled component we say that an input field and that input field is controlled by name, value or onchange event (which is the best way).\r\n// Uncontrolled component like an input field just of type text no need to give other parameters then to get that input filed we use hooks named as REf and useRef.\r\n/*\r\nimport React, { useState } from 'react'\r\nimport { useRef } from 'react';\r\n\r\nconst App = () => {\r\n    const name = useRef(null);\r\n    const [show, setShow] = useState(false);\r\n\r\n    const formSubmitted = (e) => {\r\n        e.preventDefault();\r\n        console.log(name);\r\n        console.log(name.current);\r\n        console.log(name.current.value);\r\n        let value = name.current.value;\r\n        value=== \"\" ? alert(\"fill the data\") : setShow(true);\r\n    }\r\n\r\n  return (\r\n    <div>\r\n    <form action=\"\" onSubmit={formSubmitted}><br/>\r\n        <label htmlFor='luckyNum'>Enter your name</label> <br/>\r\n        <input type='text' id=\"name\" ref={name}/>\r\n        <br/><br/>\r\n        <button>Submit</button>\r\n    </form>\r\n\r\n    <p>{show? `My lucky name is ${name.current.value}` : \"\"}</p>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n*/\r\n\r\n\r\n// Login form \r\n/*\r\nimport React from 'react'\r\nimport { useState } from 'react';\r\n\r\nconst App = () => {\r\n    const [fullName, setName] = useState({\r\n        fname:\"\",\r\n        lname:\"\",\r\n    })\r\n\r\n    function formSubmitted(event){\r\n        event.preventDefault();\r\n    }\r\n\r\n    function handleInput(e){\r\n        // let value = e.target.value;\r\n        // let name = e.target.name;\r\n        const {value, name} = e.target\r\n        if(name == \"fname\"){\r\n            setName((prev)=>{\r\n                return{\r\n                    fname: value,\r\n                    lname: prev.lname\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            setName((prev)=>{\r\n                return{\r\n                    fname: prev.fname,\r\n                    lname: value\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n  return (\r\n    <>\r\n    <h1>Hello {fullName.fname} {fullName.lname}</h1>\r\n      <form onSubmit={formSubmitted}>\r\n        <input type='text' name='fname' value={fullName.fname} placeholder='Enter your First name' onChange={handleInput}/> <br/><br/>\r\n        <input type='text' name='lname' value={fullName.lname} placeholder='Enter your last name' onChange={handleInput}/><br/><br/>\r\n        <button type='submit'>Click me</button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n*/\r\n\r\n\r\n// use context api \r\n// It is used to pass the data from parent to any child component \r\n// there are 3 steps. 1st step is create context, make provider to parent , make consumer to component that use data.\r\n// To use this i have craeted compA, compB and compC\r\n// In compC i use context api \r\n// In compB i use usecontext hook\r\n/*\r\nimport React from 'react'\r\nimport CompA from './Components/CompA'\r\nimport { createContext } from 'react'\r\n\r\nconst FirstName = createContext();\r\nconst LastName = createContext();\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n<>\r\n<FirstName.Provider value={\"Vanita\"}>\r\n<LastName.Provider value={\"Chawla\"}>\r\n    <CompA/>\r\n    </LastName.Provider>\r\n    </FirstName.Provider>\r\n</>\r\n  )\r\n}\r\n\r\nexport default App;\r\nexport { FirstName, LastName };\r\n*/\r\n\r\n// HOC.. high order component\r\n// HOC wo component hota ha jo component as a input leta ha or component as a output return karta ha \r\n// agr humen ek counter banana ha per wo dikhana 3 bar ha aur 3no ke styling chnage ho to hum ek HOC component bna dengy jo wrapper ke tarah kam karega matlb component as a prop input lega or output bhi ek counter component return karega\r\n/*\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst App = () => {\r\n    \r\n\r\n  return (\r\n    <div>\r\n        <HOC cmp={Counter}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nfunction HOC(props){\r\n    return(<>\r\n<h1 style={{backgroundColor:\"red\"}}><props.cmp/></h1>\r\n    </>)\r\n}\r\n\r\nfunction Counter(){\r\n    const [counter, setCounter] = useState(0);\r\n    return(\r\n    <>\r\n    <h1>{counter}</h1>\r\n        <button onClick={()=> setCounter(counter+1)}>Update</button>\r\n\r\n    </>)\r\n}\r\n\r\nexport default App;\r\n*/\r\n\r\n\r\n// send data from child to parent\r\n// first pass the function from parent component \r\n// then pass the data as parameter in child component\r\n// then we can easily use that data in parent but in that function\r\n/*\r\nimport React from 'react'\r\nimport Lifting from './Components/Lifting'\r\n\r\nconst App = () => {\r\n\r\n    function parent(data){\r\n        alert(data)\r\n    }\r\n\r\n  return (\r\n    <>\r\n        <Lifting alert={parent}/>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default App;\r\n*/\r\n\r\n\r\n// forwardRef\r\n// we use useRef when we have to change the input value on button click but input and button both are in one component\r\n// now we use forwardRef, when we have a button in parent component and input in child componnet and we change input value on button click from parent\r\nimport React from 'react'\r\nimport { useRef } from 'react'\r\nimport Forward from './Components/Forward'\r\n\r\nconst App = () => {\r\n    let inputRef = useRef(null);\r\n    \r\n    function changeInput(){\r\n\r\n    }\r\n\r\n  return (\r\n    <>\r\n        <h1>Hello</h1>\r\n        <Forward/>\r\n        <button onClick={changeInput}>Click me</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n"],"mappingszB,SAASC,MAAM,QAAQ,OAAO;AAC9B,OAAOC,OAAO,MAAM,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,IAAIC,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE3B,SAASS,WAAWA,CAAA,EAAE,CAEtB;EAEF,oBACEN,OAAA,CAAAE,SAAA;IAAAK,QAAA,gBACIP,OAAA;MAAAO,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACdX,OAAA,CAACF,OAAO;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACVX,OAAA;MAAQY,OAAO,EAAEN,WAAY;MAAAC,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACjD,CAAC;AAEP,CAAC;AAAAP,EAAA,CAdKD,GAAG;AAAAU,EAAA,GAAHV,GAAG;AAgBT,eAAeA,GAAG;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}